<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少年游</title>
  
  <subtitle>茫茫人海，却似荒野</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shelah-kuang.github.io/"/>
  <updated>2019-08-24T13:00:52.432Z</updated>
  <id>http://shelah-kuang.github.io/</id>
  
  <author>
    <name>kuangsl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java代码规范</title>
    <link href="http://shelah-kuang.github.io/2019/08/16/style-javaguide/"/>
    <id>http://shelah-kuang.github.io/2019/08/16/style-javaguide/</id>
    <published>2019-08-16T13:15:32.000Z</published>
    <updated>2019-08-24T13:00:52.432Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>此规范为google代码规范，英文原文版请点击<a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="noopener">此处</a></p></div><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p>本文档中的示例代码并不作为规范。即虽然示例代码是遵循 Google 编程风格，但并不意味着这就是是展现这些代码的唯一方式。</p><h1 id="2-Src基础"><a href="#2-Src基础" class="headerlink" title="2 Src基础"></a>2 Src基础</h1><h2 id="2-1-文件名"><a href="#2-1-文件名" class="headerlink" title="2.1 文件名"></a>2.1 文件名</h2><p>根据最顶层的类名来命名，大小写敏感，使用.java格式</p><h2 id="2-2-文件编码"><a href="#2-2-文件编码" class="headerlink" title="2.2 文件编码"></a>2.2 文件编码</h2><p>UTF-8</p><h2 id="2-3-特殊字符"><a href="#2-3-特殊字符" class="headerlink" title="2.3 特殊字符"></a>2.3 特殊字符</h2><h3 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h3><p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，即：</p><ul><li><p>所有其它字符串中的空白字符都要进行转义。</p></li><li><p>制表符不用于缩进。</p></li></ul><h3 id="特殊转义序列"><a href="#特殊转义序列" class="headerlink" title="特殊转义序列"></a>特殊转义序列</h3><p>对于具有特殊转义序列的字符(\b, \t, \n, \f, \r)，使用其转移序列而不是使用相应的八进制或者Unicode转义</p><h3 id="非ASCII字符"><a href="#非ASCII字符" class="headerlink" title="非ASCII字符"></a>非ASCII字符</h3><p>是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。</p><p>在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释</p><div class="note warning"><p>Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are <strong>broken</strong> and they must be <strong>fixed</strong>.</p></div><h1 id="3-Src结构"><a href="#3-Src结构" class="headerlink" title="3 Src结构"></a>3 Src结构</h1><p>一个源文件应当包括（以下按照顺序包括）：</p><ul><li>许可证与版权信息（如需要）</li><li>package语句</li><li>import语句</li><li>一个顶级类（只有一个）</li></ul><p>以上每个部分用一个空行隔开</p><h2 id="3-2-package语句"><a href="#3-2-package语句" class="headerlink" title="3.2 package语句"></a>3.2 package语句</h2><p>package 语句不换行，列限制(4.4节)并不适用于 package 语句。(即package 语句写在一行里)</p><h2 id="3-3-import语句"><a href="#3-3-import语句" class="headerlink" title="3.3 import语句"></a>3.3 import语句</h2><p><strong>不要使用通配符</strong>，即不要使用类似<code>import java.util.*</code>这样的语句</p><p>按照以下顺序与间距将其分为几组，每组之间一个空行，<strong>同组import不换行，组内按字典序排序</strong>：</p><ul><li>所有静态导入独立成组</li><li><code>com.google</code> 包下的</li><li>第三方的包，每个顶级包为一组，如<code>android</code>,<code>sun</code>等</li><li>java import</li><li>javax import</li></ul><h2 id="3-4-类声明"><a href="#3-4-类声明" class="headerlink" title="3.4 类声明"></a>3.4 类声明</h2><h3 id="只有一个顶级类"><a href="#只有一个顶级类" class="headerlink" title="只有一个顶级类"></a>只有一个顶级类</h3><p>每个文件中只有一个与文件名同名的顶级类</p><h3 id="类成员顺序"><a href="#类成员顺序" class="headerlink" title="类成员顺序"></a>类成员顺序</h3><p>应当按照某种逻辑进行排序而不是添加时间</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>一个类有多个构造函数或同名方法时们这些函数/方法应当按顺序<strong>放在一起</strong></p><h1 id="4-格式"><a href="#4-格式" class="headerlink" title="4 格式"></a>4 格式</h1><h2 id="4-1-使用大括号"><a href="#4-1-使用大括号" class="headerlink" title="4.1 使用大括号"></a>4.1 使用大括号</h2><p>大括号与 if,else,for,do,while 语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p><h3 id="非空块（K-amp-R）"><a href="#非空块（K-amp-R）" class="headerlink" title="非空块（K&amp;R）"></a>非空块（K&amp;R）</h3><p>对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格 (Egyptian brackets):</p><ul><li>左大括号前不换行 </li><li>左大括号后换行 </li><li>右大括号前换行 </li><li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">  <span class="keyword">while</span> (condition()) &#123;</span><br><span class="line">    method();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyClass() &#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        something();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ProblemException e) &#123;</span><br><span class="line">        recover();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (otherCondition()) &#123;</span><br><span class="line">      somethingElse();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lastThing();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>但也有一些例外</strong>，如4.8中的enum类</p><h3 id="空块"><a href="#空块" class="headerlink" title="空块"></a>空块</h3><p>一个空的块状结构里什么也不包含，大括号可以简洁地写成 {}，不需要换行。</p><p>但是如果它是一个多块语句的一部分(if/else 或 try/catch/finally) ，<strong>即使大括号内没内容，右大括号也要换行</strong>。</p><h2 id="4-2-块缩进"><a href="#4-2-块缩进" class="headerlink" title="4.2 块缩进"></a>4.2 块缩进</h2><p>每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。</p><h2 id="4-3-一行一个语句"><a href="#4-3-一行一个语句" class="headerlink" title="4.3 一行一个语句"></a>4.3 一行一个语句</h2><p>每个语句后换行</p><h2 id="4-4-列限制"><a href="#4-4-列限制" class="headerlink" title="4.4 列限制"></a>4.4 列限制</h2><p>每一列只能由80或100个字符，超过则自动换行</p><p>以下为例外情况：</p><ul><li>不可能满足列限制的行(例如，Javadoc 中的一个长 URL，或是一个长的 JSNI 方法参考)。</li><li><p>package和 import语句(见3.2节和3.3节)。</p></li><li><p>注释中那些可能被剪切并粘贴到shell中的命令行。</p></li></ul><h2 id="4-5-自动换行"><a href="#4-5-自动换行" class="headerlink" title="4.5 自动换行"></a>4.5 自动换行</h2><h3 id="换行断点"><a href="#换行断点" class="headerlink" title="换行断点"></a>换行断点</h3><p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p><ul><li><p>如果在 非赋值运算符处断开，那么在该符号前断开(比如+，它将位于下一行)。</p><p>注意：<strong>这一点与Google其它语言的编程风格不同</strong>(如C++和JavaScript)。这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（ &lt;TextendsFoo&amp;Bar&gt;)，catch块中的管道符号( catch(FooException|BarExceptione)</p></li><li><p>如果在 赋值运算符处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于 foreach语句中的分号。</p></li><li><p>方法名或构造函数名与左括号留在同一行。</p></li><li><p>逗号(,)与其前面的内容留在同一行。</p></li><li>一般而言不会再lambda语句的箭头后断开，除非是箭头后面的是一个没有大括号的表达式</li></ul><h3 id="缩进后至少-4个空格"><a href="#缩进后至少-4个空格" class="headerlink" title="缩进后至少+4个空格"></a>缩进后至少+4个空格</h3><p>自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。</p><p>当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。</p><h2 id="4-6-空白"><a href="#4-6-空白" class="headerlink" title="4.6 空白"></a>4.6 空白</h2><h3 id="垂直空白"><a href="#垂直空白" class="headerlink" title="垂直空白"></a>垂直空白</h3><p>以下几种情况需要一个空行：</p><ul><li><p>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。</p><p>  例外：</p><ul><li>两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。</li><li>在enum类的常量间</li></ul></li><li><p>要满足本文档中其他节的空行要求(比如section 3 中的文件结构 与 3.3节中的import语句)</p></li></ul><p>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</p><h3 id="水平空白"><a href="#水平空白" class="headerlink" title="水平空白"></a>水平空白</h3><p>除了语言需要与规则，单个空白同样出现在以下地方：</p><ul><li><p>分隔任何保留字与紧随其后的左括号( <code>(</code> )(如 <code>if</code>,<code>for</code>,<code>catch</code>等)。</p></li><li><p>分隔任何保留字与其前面的右大括号( <code>}</code>)(如 <code>else</code>, <code>catch</code>)。</p></li><li><p>在任何左大括号前( <code>{</code>)，两个例外：</p><ul><li>@SomeAnnotation({a,b})(不使用空格)。</li><li>String[][]x=foo;(大括号间没有空格)。</li></ul></li><li><p>任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：</p><ul><li>类型界限中的 <code>&lt;T extends Foo &amp; Bar&gt;</code>。</li><li>catch块中的管道符号<code>catch (FooException | BarException e</code>。</li><li>foreach语句中的分号。</li><li>lambda语句的箭头后面</li></ul><p>但是也有例外：</p><ul><li>两个冒号后的方法的引用，如<code>Object::toString</code></li><li><code>.</code>之后的，如<code>object.toString()</code></li></ul></li><li><p>在 <code>,:;</code>及右括号( <code>)</code>)后</p></li><li><p>如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。</p></li><li><p>类型和变量之间：List\&lt;string>list。</p></li><li><p>数组初始化中，大括号内的空格是可选的，即 <code>new int[] {5, 6}</code>和 <code>new int[] { 5, 6 }</code>都是可以的。</p></li></ul><h3 id="水平对齐：不做要求"><a href="#水平对齐：不做要求" class="headerlink" title="水平对齐：不做要求"></a>水平对齐：不做要求</h3><blockquote><p><strong>Tip:</strong> Alignment can aid readability, but it creates problems for future maintenance. </p></blockquote><h2 id="4-7-Grouping-parentheses"><a href="#4-7-Grouping-parentheses" class="headerlink" title="4.7 Grouping parentheses"></a>4.7 Grouping parentheses</h2><p>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。</p><h2 id="4-8-几种具体的结构"><a href="#4-8-几种具体的结构" class="headerlink" title="4.8 几种具体的结构"></a>4.8 几种具体的结构</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>枚举常量间用逗号隔开，<strong>换行可选</strong>,多余的空行也是允许的（通常一行）</p><p>没有方法和文档的枚举类可写成数组初始化的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">private</span>` `<span class="keyword">enum</span>` `Suit &#123; CLUBS, HEARTS, SPADES, DIAMONDS &#125;`</span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>每一个变量声明只声明一个变量，如<code>int a,b</code>是不可行的 （for循环的初始化条件除外）</p><p>需要时才声明变量，并尽快的初始化，不要在一个代码块的开头将所有局部变量一次性声明</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的初始化可以写成块状结构，如写成以下形式都是可行的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">new int[] &#123;</span><br><span class="line"> 0, 1, 2, 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new int[] &#123;</span><br><span class="line"> 0, 1,</span><br><span class="line"> 2, 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new int[] &#123;</span><br><span class="line"> 0,</span><br><span class="line"> 1,</span><br><span class="line"> 2,</span><br><span class="line"> 3</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">new int[]</span><br><span class="line">&#123;0, 1, 2, 3&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><h4 id="没有使用C语言类型的声明"><a href="#没有使用C语言类型的声明" class="headerlink" title="没有使用C语言类型的声明"></a>没有使用C语言类型的声明</h4><p>中括号是类型的一部分，而不是变量，应当使用<code>String[] args</code>, 而不是<code>String args[]</code></p></div><h3 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h3><p>与其它块状结构一致，switch 块中的内容缩进为 2 个空格。每个 switch 标签后新起一行，再缩进2个空格，写下一条或多条语句。</p><p>在一个 switch 块内，<strong>每个语句组要么通过 break,continue,return 或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组</strong>， 任何能表达这个意思的注释都是OK的(典型的是用 <code>// fall through</code>)。这个特殊的注释并不需要在最后一个语句组(一般是 default)中出现。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (input) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    prepareOneOrTwo();</span><br><span class="line">    <span class="comment">// fall through</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    handleOneTwoOrThree();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    handleLargeNumber(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>每个 switch 语句都包含一个 default 语句组，即使它什么代码也不包含。</strong></p><h3 id="注解（annotations）"><a href="#注解（annotations）" class="headerlink" title="注解（annotations）"></a>注解（annotations）</h3><p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。</p><p><strong>例外</strong>：单个的注解可以和签名的第一行出现在同一行。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="meta">@Override</span>` `<span class="keyword">public</span>` `<span class="keyword">int</span>` `hashCode() &#123; ... &#125;`</span><br></pre></td></tr></table></figure><p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="meta">@Partial</span>` `<span class="meta">@Mock</span>` `DataLoader loader;`</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>块注释与其周围的代码在同一缩进级别。它们可以是 /* … */风格，也可以是 // …风格。</p><p>对于多行的 /* … */注释，后续行必须从 *开始， 并且与前一行的 *对齐。 </p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>若类和成员的 modifiers 如果存在，则按 Java 语言规范中推荐的顺序出现。顺序如下：</p><blockquote><p>public     protected     private     abstract     static     final     transient     volatile     synchronized     native     strictfp</p></blockquote><h1 id="5-命名"><a href="#5-命名" class="headerlink" title="5 命名"></a>5 命名</h1><h2 id="5-1-通用规则"><a href="#5-1-通用规则" class="headerlink" title="5.1 通用规则"></a>5.1 通用规则</h2><p>标识符使用ASCII字母与数字，使得每个有效的标识符都可以使用<code>\w+</code>来正则匹配</p><p>在其他规范中使用的特殊前缀或后缀，如 name_, mName, s_name 和 kName，在 Java 编程风格中都不再使用。</p><h2 id="5-2-标识符类型"><a href="#5-2-标识符类型" class="headerlink" title="5.2 标识符类型"></a>5.2 标识符类型</h2><h3 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h3><p>全部小写，连续的单词简单的连接起来而<strong>不使用下划线</strong></p><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><p>使用UpperCamelCase的格式（关于UpperCamelCase在5.3介绍）</p><p>测试类的命名使用其要测试的类的名字+Test，例如HashTest</p><h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><p>使用lowerCamelCase风格</p><p>方法名通常使用动词或者动词短语</p><p>下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：test\&lt;MethodUnderTest>_\&lt;state>，例如 testPop_emptyStack。但是并不存在唯一正确的方式来命名测试方法。</p><h3 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h3><p>全部字母大写，用下划线分隔单词</p><p>每个常量都是一个静态的final字段，但是不是所有的静态final字段都是常量</p><p>名字一般为名词或者名词短语</p><h3 id="非常量字段"><a href="#非常量字段" class="headerlink" title="非常量字段"></a>非常量字段</h3><p>使用lowerCamelCase风格</p><h3 id="参数名"><a href="#参数名" class="headerlink" title="参数名"></a>参数名</h3><p>使用lowerCamelCase风格</p><p>避免使用单个字符命名</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>使用lowerCamelCase风格，除了临时变量和循环变量之外要避免用单字符进行命名</p><p>即使局部变量是 final 和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</p><h3 id="类型变量"><a href="#类型变量" class="headerlink" title="类型变量"></a>类型变量</h3><p>两种方式皆可：</p><ul><li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li><li>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</li></ul><h2 id="5-3-CamelCase"><a href="#5-3-CamelCase" class="headerlink" title="5.3 CamelCase"></a>5.3 CamelCase</h2><p>移除所有的单引号</p><p>将所有字母都小写(包括缩写)，然后将单词的第一个字母大写</p><ul><li>UpperCamelCase：每个单词的第一个字母都大写，来得到大驼峰式命名</li><li>lowerCamelCase：除了第一个单词，每个单词的第一个字母都大写</li></ul><blockquote><p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名 checkNonempty和 checkNonEmpty也都是正确的。</p></blockquote><h1 id="6-代码实践"><a href="#6-代码实践" class="headerlink" title="6 代码实践"></a>6 代码实践</h1><h2 id="6-1-尽量使用-override"><a href="#6-1-尽量使用-override" class="headerlink" title="6.1 尽量使用@override"></a>6.1 尽量使用@override</h2><p>只要是合法的，就把 @Override 注解给用上。</p><h2 id="6-2-不能忽略捕获的异常"><a href="#6-2-不能忽略捕获的异常" class="headerlink" title="6.2 不能忽略捕获的异常"></a>6.2 不能忽略捕获的异常</h2><p>对捕获的异常不做响应很少是正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个 AssertionError重新抛出。)</p><p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明。</p><p>但是，<strong>在测试中，如果一个捕获的异常被命名为 expected，则它可以被不加注释地忽略。</strong></p><h2 id="6-3-静态成员的调用"><a href="#6-3-静态成员的调用" class="headerlink" title="6.3 静态成员的调用"></a>6.3 静态成员的调用</h2><p>使用类名调用静态的类成员，而不是具体某个对象或表达式。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Foo aFoo = ...;</span><br><span class="line">Foo.aStaticMethod(); <span class="comment">// good</span></span><br><span class="line">aFoo.aStaticMethod(); <span class="comment">// bad</span></span><br><span class="line">somethingThatYieldsAFoo().aStaticMethod(); <span class="comment">// very bad</span></span><br></pre></td></tr></table></figure><h2 id="6-4-禁用finalizers"><a href="#6-4-禁用finalizers" class="headerlink" title="6.4 禁用finalizers"></a>6.4 禁用finalizers</h2><p>一般极少override <code>Object.finalize</code></p><blockquote><p><strong>Tip:</strong> Don’t do it. If you absolutely must, first read and understand <a href="http://books.google.com/books?isbn=8131726592" target="_blank" rel="noopener"><em>Effective Java</em> Item 7,</a>“Avoid Finalizers,” very carefully, and <em>then</em> don’t do it.</p></blockquote><h1 id="7-JavaDoc"><a href="#7-JavaDoc" class="headerlink" title="7 JavaDoc"></a>7 JavaDoc</h1><h2 id="7-1-格式"><a href="#7-1-格式" class="headerlink" title="7.1 格式"></a>7.1 格式</h2><p>Javadoc 块的基本格式如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">/**`` ` `* Multiple lines of Javadoc text are written here,`` ` `* wrapped normally...`` ` `*/</span>`` ` `<span class="keyword">public</span>` `<span class="keyword">int</span>` `method(String p1) &#123; ... &#125;`</span><br></pre></td></tr></table></figure><p>或者是以下单行形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">/** An especially short bit of Javadoc. */</span>`</span><br></pre></td></tr></table></figure><p>基本格式总是 OK 的。</p><p>当整个 Javadoc 块能容纳于一行时(且没有 Javadoc 标记，比如@return)，可以使用单行形式。</p><p>空行(即，只包含最左侧星号的行)会出现在段落之间和 Javadoc 标记(@XXX)之前(如果有的话)。除了第一个段落，每个段落第一个单词前都有标签<code>&lt;p&gt;</code>，并且它和第一个单词间没有空格。</p><p>标准的 Javadoc 标记按以下顺序出现：@param, @return, @throws, @deprecated, 前面这4种标记如果出现，描述都不能为空。当描述无法在一行中容纳，连续行需要至少再缩进4个空格。</p><h2 id="7-2-摘要片段"><a href="#7-2-摘要片段" class="headerlink" title="7.2 摘要片段"></a>7.2 摘要片段</h2><p>每个类或成员的 Javadoc 以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下它是唯一出现的文本，比如在类和方法索引中。</p><p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以 A{@codeFoo}isa…或 This method returns…开头, 它也不会是一个完整的祈使句，如 Save the record…。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p><blockquote class="question">一个常见的错误是把简单的Javadoc写成 /<strong> @return the customer ID */，这是不正确的。它应该写成 /</strong> Returns the customer ID. */。</blockquote><h2 id="7-3-需要书写Javadoc的地方"><a href="#7-3-需要书写Javadoc的地方" class="headerlink" title="7.3 需要书写Javadoc的地方"></a>7.3 需要书写Javadoc的地方</h2><p>至少在每个public类及它的每个 public 和 protected 成员处使用 Javadoc</p><p>以下为例外情况：</p><ul><li><p>不言自明的方法，对于简单明显的方法单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p><ul><li>如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由</li></ul></li><li><p>override，如果一个方法重写了超类中的方法，那么 Javadoc 并非必需的。</p></li></ul><p>对于包外不可见的类和方法，如有需要，也是要使用 Javadoc 的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成 Javadoc，这样更统一更友好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;此规范为google代码规范，英文原文版请点击&lt;a href=&quot;https://google.github.io/styleguide/javaguide.html&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="coding" scheme="http://shelah-kuang.github.io/categories/coding/"/>
    
    
      <category term="-java" scheme="http://shelah-kuang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>社会学概论-越轨行为与社会控制</title>
    <link href="http://shelah-kuang.github.io/2019/08/08/shxgl4/"/>
    <id>http://shelah-kuang.github.io/2019/08/08/shxgl4/</id>
    <published>2019-08-08T03:22:43.000Z</published>
    <updated>2019-08-08T03:23:43.121Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="人文社科" scheme="http://shelah-kuang.github.io/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/"/>
    
    
      <category term="-社会学" scheme="http://shelah-kuang.github.io/tags/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>社会学概论-社会互动与社会结构</title>
    <link href="http://shelah-kuang.github.io/2019/08/08/shxgl3/"/>
    <id>http://shelah-kuang.github.io/2019/08/08/shxgl3/</id>
    <published>2019-08-08T03:22:35.000Z</published>
    <updated>2019-08-08T03:24:22.151Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="人文社科" scheme="http://shelah-kuang.github.io/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/"/>
    
    
      <category term="-社会学" scheme="http://shelah-kuang.github.io/tags/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>社会学概论-社会与文化</title>
    <link href="http://shelah-kuang.github.io/2019/08/05/shxgl2/"/>
    <id>http://shelah-kuang.github.io/2019/08/05/shxgl2/</id>
    <published>2019-08-05T02:31:41.000Z</published>
    <updated>2019-08-08T03:21:45.006Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary"><h2 id="阅读文献"><a href="#阅读文献" class="headerlink" title="阅读文献"></a>阅读文献</h2><p>金耀基：“中国人对私隐权的-中国人文鼎细等线的公私观念”</p><p>林语堂：《中国人》第四章 “人生的理想”</p><p>Horace Miner. Body Ritual among the Nacirema</p></div><h2 id="汉语中的社会"><a href="#汉语中的社会" class="headerlink" title="汉语中的社会"></a>汉语中的社会</h2><p>社：土地之主也。“左祖右庙”。后社由最初的土地之主发展为一种乡村基层组织：里社、乡社。后又发展成志趣相同的人的一个团体，如茶社</p><p>会：集会</p><blockquote><p>汉语中一开始社与会是分开的，不怎么连用(就算连用也是表示一个小团体，和社字意思类似)，后日本在翻译society的时候使用了社会一词，之后引入时中国也开始使用社会这个词语</p></blockquote><h2 id="社会学中的社会"><a href="#社会学中的社会" class="headerlink" title="社会学中的社会"></a>社会学中的社会</h2><p>马克思定义的<strong><code>社会</code></strong>：社会是人们交互作用的产物，生产关系的总合起来就构成了社会关系  </p><p>马克思定义的社会是一个实体概念，但不是一个具体的实体概念，是那种通过观察、体会其效用才能证明存在的实体</p><p><strong>社会的“发现”</strong></p><p><strong>村庄社会</strong>，<strong>民族国家</strong>，<strong>世界社会、全球社会</strong></p><p><em>在几百多年前，我国其实并没有民族主义形成，经过战争后才逐渐形成</em></p><h3 id="社会模型"><a href="#社会模型" class="headerlink" title="社会模型"></a>社会模型</h3><ul><li><strong>系统模型</strong>，最典型的是结构功能主义，代表人物：帕雷托、斯宾塞、涂尔干、帕森斯 。社会形象：有秩序的整体，共识，一套功能机构</li><li><strong>冲突模型</strong>，人与人之间相互冲突，争夺资源，最典型的是马克思，<strong>意识形态</strong>(在系统模型中称为共识，意识形态某种形式上也是一种共识)，“在每一个时代，统治阶级的思想就是这个时代的思想”，意识形态也被叫做“虚假意识”，原因如之前引用的话，只是部分人的共识。</li><li><strong>互动模型</strong>，最典型的是符号互动论，社会是一种谈判，互动模型与系统模型和冲突模型都不同，他不从宏观角度理解社会，而是从微观角度去理解社会，从人的活动来理解，把社会看作是相互作用、沟通和谈判</li></ul><h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><p>“有文化”，“没文化”的语境相关：教育</p><h3 id="社会学意义上的文化"><a href="#社会学意义上的文化" class="headerlink" title="社会学意义上的文化"></a>社会学意义上的文化</h3><p> 社会学意义上的<strong><code>定义</code></strong>：一个社会或群体共同承认的价值观，遵从的规范，连同他们所创造的物质产品</p><p>“没有文化的人类，事实上根本不存在” –克里福德·格尔兹</p><p>人是<strong><code>“意义”</code></strong>型的动物, 人是<strong><code>“文化型”</code></strong>动物</p><h3 id="文化意义的演变：从泰勒到格尔兹"><a href="#文化意义的演变：从泰勒到格尔兹" class="headerlink" title="文化意义的演变：从泰勒到格尔兹"></a>文化意义的演变：从泰勒到格尔兹</h3><p>泰勒:</p><blockquote><p>文化或文明是一个复杂的整体，它包括知识、信仰、艺术、法律、伦理道德、风俗和作为社会成员的人通过学习而获得的任何其他能力和习惯<br>                                                                                                                                                                                —E.B.Taylor</p></blockquote><p>马林诺夫斯基：在泰勒的基础上增加了<strong>物质文化</strong></p><p>格尔兹抛弃了大而全的文化的定义，方便于研究</p><blockquote><p>文化是人类用来解释他们的经验，指导他们行动的意义结构<br>                                                                                                                                  ——格尔兹《文化的解释》</p><p>“我与马克思·韦伯一样，认为人是悬挂在由他们自己编织的意义之网上的动物，我把文化看作这些网。”</p></blockquote><p>当代社会学与人类学研究中，主要采用的是格尔兹改造过的文化的定义</p><p>格尔兹将文化看作可以为大众获得的象征(符号)形态，人们通过这些象征形态来体验和表达意义。这一界定将文化的定义从泰勒无所不包的定义缩小，集中到了<strong>意义系统</strong></p><p><strong><code>意义系统</code></strong>——共享的，分享的</p><h3 id="研究文化的其他方向"><a href="#研究文化的其他方向" class="headerlink" title="研究文化的其他方向"></a>研究文化的其他方向</h3><p>一些人探索文化的遗传密码，探索人类的大脑结构</p><h3 id="亚文化"><a href="#亚文化" class="headerlink" title="亚文化"></a>亚文化</h3><p>当在社会的某一群体中，形成一种既<strong>包括一些主流文化特征</strong>，也包括<strong>某些独特的文化要素</strong>时，这一群体的文化，就叫做<strong><code>亚文化</code></strong></p><p>“亚文化举例”：DISCO，黑人文化</p><p>亚文化应当包括主流文化特征的核心价值观，亚文化与主流文化是相对的，亚文化可能被主流文化所吸收</p><h3 id="反文化"><a href="#反文化" class="headerlink" title="反文化"></a>反文化</h3><p>从根本上与社会主流文化相对立的文化，它有意识的对抗社会上的某些最重要的价值和规范，并为此感到自豪</p><p>举例：嬉皮士，披头士</p><h3 id="文化的构成"><a href="#文化的构成" class="headerlink" title="文化的构成"></a>文化的构成</h3><p><strong><code>价值观</code></strong>：社会成员关于好坏、对错、符合或违背人们愿望等的共同看法。是文化中最为核心的部分</p><p><strong><code>规范</code></strong>：人们共同遵守的对特定环境中人的正当行为方式所作出规定的准则</p><p>主要规范类型：社会习俗，道德，法律</p><p>规范是具体的准则，价值观是抽象的一般观念，价值观是判断规范的尺度，规范是价值观的体现</p><p><strong><code>物质文化</code></strong>：社会已有的物质形式</p><p>奥格本：文化堕距</p><p>文化是一个整体，牵一发而动全身</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note primary&quot;&gt;&lt;h2 id=&quot;阅读文献&quot;&gt;&lt;a href=&quot;#阅读文献&quot; class=&quot;headerlink&quot; title=&quot;阅读文献&quot;&gt;&lt;/a&gt;阅读文献&lt;/h2&gt;&lt;p&gt;金耀基：“中国人对私隐权的-中国人文鼎细等线的公私观念”&lt;/p&gt;&lt;p&gt;林
      
    
    </summary>
    
      <category term="人文社科" scheme="http://shelah-kuang.github.io/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/"/>
    
    
      <category term="-社会学" scheme="http://shelah-kuang.github.io/tags/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>社会学概论-社会学的视角</title>
    <link href="http://shelah-kuang.github.io/2019/08/05/shxgl1/"/>
    <id>http://shelah-kuang.github.io/2019/08/05/shxgl1/</id>
    <published>2019-08-05T02:31:30.000Z</published>
    <updated>2019-08-05T09:17:54.010Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>社会学的学习是激情之旅，让我们一起努力，接触那些饱受争议的概念与理论，试图打开那些紧闭着的大门，去发现我们非常熟悉的日常世界之幽暗玄冥的一面                                                                                                                                —-Peter Berger</p></div><p>课程基本目标：</p><p>略（略略略）</p><blockquote><p>明白定义背后的争议<br>世界有很多种表达方式<br>社会学特点： 超越自身内部的分歧</p></blockquote><div class="note primary"><h2 id="本讲阅读文献"><a href="#本讲阅读文献" class="headerlink" title="本讲阅读文献"></a>本讲阅读文献</h2><p>C.Wright Mills “The promise of Sociology”</p><p>Peter Berger. Invitation to Sociology</p></div><h2 id="课程阅读文献："><a href="#课程阅读文献：" class="headerlink" title="课程阅读文献："></a>课程阅读文献：</h2><p>《社会学教程》，主编王思斌</p><p>接触不同的表述：<br>         吉登斯社会学<br>         邱泽奇《社会学是什么》</p><p>米尔斯《社会学的想象力》<br>费孝通《乡土中国》<br>涂尔干《自杀论》（“自杀，往往与时代的病症相关联，并不仅是个人问题”）<br>马克斯·韦伯《新教伦理与资本主义精神》<br>彼得·伯格 《与社会学同游：人文主义的视角》（有较强的个人风格）</p><h2 id="从社会学发展的历史看社会学的视角"><a href="#从社会学发展的历史看社会学的视角" class="headerlink" title="从社会学发展的历史看社会学的视角"></a>从社会学发展的历史看社会学的视角</h2><p>诞生于社会需求之中</p><p>社会学之父 - 孔德（August Comte）<br><strong>1838</strong>年 其对于 <strong><code>社会学</code></strong>的定义： 对于社会现象所固有的全基本规律的实证研究<br>一开始想用social physics（社会物理学）来指代</p><p>观察一个社会事件：-偶然性 -事件背后的可理解性</p><p>1838年经历过的背景：</p><ul><li>启蒙运动，理性的年代，将科学用于社会的研究</li><li>双元革命（法国大革命与工业革命）<strong>社会学产生从社会意义讲是双元革命之子</strong><br>法国大革命：追求平等与博爱，用理性改变不合理的旧制度，混乱<br>工业革命：冲破了惯例与习俗，物质丰富背后的肮脏，素来遵从的观念烟消云散</li></ul><p>孔德：用理性找出社会内在规律，恢复社会的美德，解救社会的困境，“人性的宗教”</p><p><strong>社会学的创立有着很强烈的乌托邦色彩</strong>，传统的社区邻里关系<br>“奥古斯特·孔德想象了一个由社会学家领导的家庭式秩序”–麦克布罗维《公共社会学》</p><p>涂尔干设想了一种建立在具有劳动分工的法团主义组织基础上的有机团结-一种行会社会主义的形式</p><p>孔德之后的三位奠基人：卡尔·马克思，埃米尔·涂尔干，马克思·韦伯</p><p>马克思研究社会学角度：<strong>阶级分工</strong></p><p>涂尔干：使得社会学学院化，研究社会学的观点：<strong>社会是一个整体，社会事实外在于个体</strong>（可以参考其《自杀论》）</p><p>韦伯：现代社会学与公共社会学，重要的资本主义研究：<strong>资本主义的出现与兴起</strong>，从“精神氛围”研究资本主义的兴起，<strong>提出科层制</strong>，科层化-理性化的来安排生产生活，工具理性与价值理性，<strong>社会分层</strong></p><blockquote><p>工具理性：通过实践的途径确认工具或手段的有用性，从而追求事物的最大功效，为人的某种功利的实现服务</p><p>价值理性：通过有意识地对一个特定的行为—伦理的、美学的、宗教的或作任何其他阐释的——无条件的固有价值的纯粹信仰，不管是否取得成就</p></blockquote><p>“世界无可避免的进入了铁笼之中”</p><p>马克思认为经济基础决定上层建筑，而韦伯将宗教文化放在了一个独立的地位，进行<strong>比较宗教研究</strong></p><p><strong><code>社会学的三大理论视角</code></strong>：</p><ul><li>冲突理论 –马克思</li><li>结构功能主义 –涂尔干</li><li>符号互动论 –韦伯（符号互动论成形于米德，但其很大部分的受到了韦伯的影响）</li></ul><p>韦伯强调微观的<strong>社会行动者</strong>，而不是整体去讨论整体的宗教，文化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;社会学的学习是激情之旅，让我们一起努力，接触那些饱受争议的概念与理论，试图打开那些紧闭着的大门，去发现我们非常熟悉的日常世界之幽暗玄冥的一面                                    
      
    
    </summary>
    
      <category term="人文社科" scheme="http://shelah-kuang.github.io/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/"/>
    
    
      <category term="-社会学" scheme="http://shelah-kuang.github.io/tags/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>博客内容显示美化</title>
    <link href="http://shelah-kuang.github.io/2019/07/20/%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9%E7%BE%8E%E5%8C%96/"/>
    <id>http://shelah-kuang.github.io/2019/07/20/博客内容美化/</id>
    <published>2019-07-20T06:29:43.000Z</published>
    <updated>2019-07-20T07:07:46.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加标签框"><a href="#添加标签框" class="headerlink" title="添加标签框"></a>添加标签框</h1><p>之前一直觉得只有引用框的颜色比较单调，想要修改但是只能改css，<del>但我不会啊</del>, 现在发现next主题的标签插件的 <code>Bootstrap Callout</code> 标签很好用</p><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; Content (支持Markdown标签) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>其中， <code>class_name</code> 可以是以下列表中的一个值：</p><ul><li><code>default</code></li><li><code>primary</code></li><li><code>success</code></li><li><code>info</code></li><li><code>warning</code></li><li><code>danger</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&#123;% note default %&#125;#### Default HeaderWelcome to [Hexo!](https://hexo.io)&#123;% endnote %&#125;`</span><br></pre></td></tr></table></figure><div class="note default"><h4 id="Default-Header"><a href="#Default-Header" class="headerlink" title="Default Header"></a>Default Header</h4><p>Welcome to <a href="https://hexo.io" target="_blank" rel="noopener">Hexo!</a></p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">#### Primary Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note primary"><h4 id="Primary-Header"><a href="#Primary-Header" class="headerlink" title="Primary Header"></a>Primary Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io" target="_blank" rel="noopener">Hexo!</a></p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">#### Success Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note success"><h4 id="Success-Header"><a href="#Success-Header" class="headerlink" title="Success Header"></a>Success Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io" target="_blank" rel="noopener">Hexo!</a></p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line">#### Warning Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><h4 id="Warning-Header"><a href="#Warning-Header" class="headerlink" title="Warning Header"></a>Warning Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io" target="_blank" rel="noopener">Hexo!</a></p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### Danger Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger"><h4 id="Danger-Header"><a href="#Danger-Header" class="headerlink" title="Danger Header"></a>Danger Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io" target="_blank" rel="noopener">Hexo!</a></p></div><p><strong>另外在主题的<code>_config.yml</code>中可以设置标签是否带icon，默认是不带的，可以修改为true，之后如果要使用无icon的可以如下使用</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">#### No icon note</span><br><span class="line">Note **without** icon: `note info no-icon`</span><br><span class="line">&#123;% code %&#125;</span><br><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br><span class="line">&#123;% endcode %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon"><h4 id="No-icon-note"><a href="#No-icon-note" class="headerlink" title="No icon note"></a>No icon note</h4><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br></pre></td></tr></table></figure></div><h1 id="自定义引用块"><a href="#自定义引用块" class="headerlink" title="自定义引用块"></a>自定义引用块</h1><p>除了上面的方法，还有一种直接改css的</p><p>在<code>~/themes/next/source/css/_custom/custom.styl</code>中加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span><span class="selector-class">.bluequote</span> &#123;</span><br><span class="line">    color: #555; // 文字颜色</span><br><span class="line">    border-left: 4px solid rgb(16, 152, 173); // 边框颜色和粗细</span><br><span class="line">    background-color: rgb(227, 242, 253); // 背景颜色</span><br><span class="line">    <span class="selector-tag">border-top-right-radius</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom-right-radius</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">margin-bottom</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&lt;blockquote class=&quot;question&quot;&gt;内容&lt;/blockquote&gt;`</span><br></pre></td></tr></table></figure><blockquote class="bluequote">这是效果啊啊啊啊啊啊</blockquote><h1 id="引用内容居中"><a href="#引用内容居中" class="headerlink" title="引用内容居中"></a>引用内容居中</h1><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul><li>HTML方式：使用这种方式时，给 <code>img</code> 添加属性 <code>class=&quot;blockquote-center&quot;</code> 即可。</li><li>标签方式：使用 <code>centerquote</code> 或者 简写 <code>cq</code>。</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签别名 --&gt;</span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><p>效果举例：</p><blockquote class="blockquote-center"><p>今夜美丽的月光 你看多好！<br>不要说死亡的烛光何须倾倒<br>生命依然生长在忧愁的河水上<br>月光照着月光 月光普照<br>今夜美丽的月光合在一起流淌</p></blockquote><h1 id="文字添加色块"><a href="#文字添加色块" class="headerlink" title="文字添加色块"></a>文字添加色块</h1><p>同样在上文件中添加代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">// 下载样式</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-id">#download</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background</span>: transparent;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line"><span class="attribute">transition</span>: all .<span class="number">5s</span> ease;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 颜色块-绿</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-蓝</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-紫</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框红色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-red</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框黄色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-yellow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框绿色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框蓝色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框紫色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框红色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-red</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框黄色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-yellow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框绿色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框蓝色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框紫色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框红色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-red</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框黄色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-yellow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框绿色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框蓝色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框紫色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">border-top-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-blue"</span>&gt;</span> 这是inline-blue <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-purple"</span>&gt;</span> 这是inline purple <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-yellow"</span>&gt;</span> 这是yellow <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-green"</span>&gt;</span> 这是green <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-blue"</span>&gt;</span> 这是div-border-left-blue <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span id="inline-blue"> 这是inline-blue </span><br><span id="inline-purple"> 这是inline purple </span><br><span id="inline-yellow"> 这是yellow </span><br><span id="inline-green"> 这是green </span></p><p id="div-border-left-blue"> 这是div-border-left-blue </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;添加标签框&quot;&gt;&lt;a href=&quot;#添加标签框&quot; class=&quot;headerlink&quot; title=&quot;添加标签框&quot;&gt;&lt;/a&gt;添加标签框&lt;/h1&gt;&lt;p&gt;之前一直觉得只有引用框的颜色比较单调，想要修改但是只能改css，&lt;del&gt;但我不会啊&lt;/del&gt;, 现在发现next
      
    
    </summary>
    
      <category term="博客优化" scheme="http://shelah-kuang.github.io/categories/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="-blog" scheme="http://shelah-kuang.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-n-step Bootstraping</title>
    <link href="http://shelah-kuang.github.io/2019/07/13/RL7/"/>
    <id>http://shelah-kuang.github.io/2019/07/13/RL7/</id>
    <published>2019-07-13T07:10:00.000Z</published>
    <updated>2019-08-08T03:27:32.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对应章节：<a href="http://www.incompleteideas.net/book/the-book-2nd.html" target="_blank" rel="noopener">《Reinforcement Learning: An Introduction》第二版</a>  Chap 7</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对应章节：&lt;a href=&quot;http://www.incompleteideas.net/book/the-book-2nd.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Reinforcement Learning:
      
    
    </summary>
    
      <category term="强化学习" scheme="http://shelah-kuang.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-RL" scheme="http://shelah-kuang.github.io/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-Temporal-Difference Learning</title>
    <link href="http://shelah-kuang.github.io/2019/07/13/RL6/"/>
    <id>http://shelah-kuang.github.io/2019/07/13/RL6/</id>
    <published>2019-07-13T07:09:55.000Z</published>
    <updated>2019-08-08T03:27:07.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对应章节：<a href="http://www.incompleteideas.net/book/the-book-2nd.html" target="_blank" rel="noopener">《Reinforcement Learning: An Introduction》第二版</a>  Chap 6</p></blockquote><p><del>假装加一个TODO（）就会继续补一样</del></p><h2 id="6-1-TD-Prediction"><a href="#6-1-TD-Prediction" class="headerlink" title="6.1 TD Prediction"></a>6.1 TD Prediction</h2><h2 id="6-2-Advantages-of-TD-Prediction-Methods"><a href="#6-2-Advantages-of-TD-Prediction-Methods" class="headerlink" title="6.2 Advantages of TD Prediction Methods"></a>6.2 Advantages of TD Prediction Methods</h2><h2 id="6-3-Optimality-of-TD-0"><a href="#6-3-Optimality-of-TD-0" class="headerlink" title="6.3 Optimality of TD(0)"></a>6.3 Optimality of TD(0)</h2><h2 id="6-4-Sarsa-On-policy-TD-Control"><a href="#6-4-Sarsa-On-policy-TD-Control" class="headerlink" title="6.4 Sarsa: On-policy TD Control"></a>6.4 Sarsa: On-policy TD Control</h2><h2 id="6-5-Q-learning-Off-policy-TD-Control"><a href="#6-5-Q-learning-Off-policy-TD-Control" class="headerlink" title="6.5 Q-learning: Off-policy TD Control"></a>6.5 Q-learning: Off-policy TD Control</h2><h2 id="6-6-Expected-Sarsa"><a href="#6-6-Expected-Sarsa" class="headerlink" title="6.6 Expected Sarsa"></a>6.6 Expected Sarsa</h2><h2 id="6-7-Maximization-Bias-and-Double-Learning"><a href="#6-7-Maximization-Bias-and-Double-Learning" class="headerlink" title="6.7 Maximization Bias and Double Learning"></a>6.7 Maximization Bias and Double Learning</h2><h2 id="6-8-Games-Afterstates-and-Other-Special-Cases"><a href="#6-8-Games-Afterstates-and-Other-Special-Cases" class="headerlink" title="6.8 Games, Afterstates, and Other Special Cases"></a>6.8 Games, Afterstates, and Other Special Cases</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对应章节：&lt;a href=&quot;http://www.incompleteideas.net/book/the-book-2nd.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Reinforcement Learning:
      
    
    </summary>
    
      <category term="强化学习" scheme="http://shelah-kuang.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-RL" scheme="http://shelah-kuang.github.io/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-Monte Carlo Methods</title>
    <link href="http://shelah-kuang.github.io/2019/07/13/RL5/"/>
    <id>http://shelah-kuang.github.io/2019/07/13/RL5/</id>
    <published>2019-07-13T07:09:46.000Z</published>
    <updated>2019-07-15T10:17:01.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对应章节：<a href="http://www.incompleteideas.net/book/the-book-2nd.html" target="_blank" rel="noopener">《Reinforcement Learning: An Introduction》第二版</a>  Chap 5</p></blockquote><p>蒙特卡洛方法不需要环境的信息，只需要经验（experience—sample sequences of states, actions, and rewards from actual or simulated interaction with an environment.）</p><p>Monte Carlo methods are ways of solving the reinforcement learning problem based on averaging sample returns. To ensure that well-defined returns are available, here we define Monte Carlo methods only for episodic tasks.</p><h2 id="5-1-Monte-Carlo-Prediction"><a href="#5-1-Monte-Carlo-Prediction" class="headerlink" title="5.1 Monte Carlo Prediction"></a>5.1 Monte Carlo Prediction</h2><p>有两种方法，一种是“<strong><code>first-visit</code></strong>“,把整个片段集所有第一次访问到状态<img src="https://www.zhihu.com/equation?tex=s" alt="[公式]">时的returns做平均化处理，来估计$v_\pi(s)$的值另一种是”<strong><code>every visit</code></strong>”，把整个片段集中所有访问到s状态时的returns取平均，来估计$v_\pi(s)$的值。两种方法都有应用，下给出first-visit，在9和12章介绍every-visit</p><p><img src="/2019/07/13/RL5/51.png"></p><p>每一次返回平均值都是其本身的无偏估计，标准偏差在$\sqrt{\frac{1}{n}}$内</p><p>蒙特卡洛算法每一次运行都是独立的，也就是说他不是”bootstrap”的</p><h2 id="5-2-Monte-Carlo-Estimation-of-Action-Values"><a href="#5-2-Monte-Carlo-Estimation-of-Action-Values" class="headerlink" title="5.2 Monte Carlo Estimation of Action Values"></a>5.2 Monte Carlo Estimation of Action Values</h2><p>如何估计$q_\pi(s,a)$, 同上一小节一样也是first-visit与every-visit两种方式</p><p>不过有一个问题在于如何保证所有的action都被考虑到，这就是之前第二章提到的如何保持exploit和explore的关系的问题，称为“<strong><code>maintaining exloration</code></strong>“问题，一种解决方式是对于每一个state–action pair，都给予其一定的概率作为一个episode的起点，这样当取样次数趋于无限的时候，每一个pair的取样次数也趋于无限了，这种方式的假设称为<strong><code>exploring starts</code></strong>.<br>但是这样有一个问题就是”it cannot be relied upon in general, particularly when learning directly from actual interaction with an environment.”, 此时一种常见的策略是调整policy，使得对于一个状态，所有的action都有一定的概率发生</p><h2 id="5-3-Monte-Carlo-Control"><a href="#5-3-Monte-Carlo-Control" class="headerlink" title="5.3 Monte Carlo Control"></a>5.3 Monte Carlo Control</h2><p>蒙特卡洛方法估计最优policies的方法和DP差不多：先迭代value function使之逼近当前policy的真实value function，然后基于更新后的value function进行policy improvement，直到最终policy基本不再变化</p><p><img src="/2019/07/13/RL5/52.png"></p><p>由于我们在此处估计的是$q_\pi(s,a)$，就不需要额外的model来确定最优的action了，可以直接根据$\pi(s)=\arg \max_a q(s, a)$来确定</p><p>为了更具备实际意义，我们要考虑如何去掉infinte number of episodes 的假设 ，一种方式是设立一个极小值，当两次policy evaluation的差别小于这个值的时候，认为此次policy evaluation结束，这种方式在小规模情况下很好，但是数据规模较大时仍然会需要比较多次。另一种方式就是放弃完整的policy evaluation，类似于4.6中的value  iteration</p><p>以下算法仍然基于了exploring starts 假设</p><p><img src="/2019/07/13/RL5/53.png"></p><h2 id="5-4-Monte-Carlo-Control-without-Exploring-Starts"><a href="#5-4-Monte-Carlo-Control-without-Exploring-Starts" class="headerlink" title="5.4 Monte Carlo Control without Exploring Starts"></a>5.4 Monte Carlo Control without Exploring Starts</h2><p><strong><code>on-policy</code></strong>: 直接优化或评价目标策略</p><p>对于on-policy策略而言，对于所有的pair有$\pi(a|s) \ge \frac{\varepsilon}{|\mathcal A(s)|}$</p><p>采取第二章中提到的类似的方法，以$p= 1- \varepsilon + \frac{\varepsilon}{|\mathcal A(s)|}$的概率选取原先确定的action</p><p><img src="/2019/07/13/RL5/54.png"></p><p><del>此处省略一大段，如果有兴趣看相关证明的可以自己看书</del></p><h2 id="5-5-Off-policy-Prediction-via-Importance-Sampling"><a href="#5-5-Off-policy-Prediction-via-Importance-Sampling" class="headerlink" title="5.5 Off-policy Prediction via Importance Sampling"></a>5.5 Off-policy Prediction via Importance Sampling</h2><p>在on-policy中，由于我们需要explore所有的action，这也就导致我们在一些时候会选择非最优的情况，故而我们有了off-policy的想法</p><p><strong><code>off-policy</code></strong>: 有两个策略，一个叫行为策略 $b$（behavior policy），另一个叫做目标策略$\pi$（target policy），从behavior policy生成的episodes中学习target policy的过程，叫做off-policy learning。</p><blockquote><p>关于off-policy与on-policy的应用比较</p><p>Throughout the rest of this book we consider both on-policy and off-policy methods. On-policy methods are generally simpler and are considered first. Off-policy methods require additional concepts and notation, and because the data is due to a di↵erent policy, off-policy methods are often of greater variance and are slower to converge. On the other hand, off-policy methods are more powerful and general.They include on-policy methods as the special case in which the target and behavior policies are the same. Off-policy methods also have a variety of additional uses in applications. For example, they can often be applied to learn from data generated by a conventional non-learning controller, or from a human expert. Off-policy learning is also seen by some as key to learning multi-step predictive models of the world’s dynamics</p></blockquote><p><del>下面又是一大波我不想看的数学知识</del></p><p>TODO()<del>以后一定补</del></p><p>因此有两种方式，可以取：</p><p>一种是取平均（ordinary importance sampling）</p><p>$$V(s) = \frac{\sum_{t \in \mathcal T(s)} \rho_t G_t}{|\mathcal T(s)|}$$</p><p>另一种是加权平均（weighted average）</p><p>$$V(s) = \frac{\sum_{t \in \mathcal T(s)} \rho_t G_t}{\sum_{t \in \mathcal T(s)} \rho_t}$$</p><h2 id="5-6-Incremental-Implementation"><a href="#5-6-Incremental-Implementation" class="headerlink" title="5.6 Incremental Implementation"></a>5.6 Incremental Implementation</h2><p><img src="/2019/07/13/RL5/55.png"></p><h2 id="5-7-Off-policy-Monte-Carlo-Control"><a href="#5-7-Off-policy-Monte-Carlo-Control" class="headerlink" title="5.7 Off-policy Monte Carlo Control"></a>5.7 Off-policy Monte Carlo Control</h2><p><img src="/2019/07/13/RL5/56.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对应章节：&lt;a href=&quot;http://www.incompleteideas.net/book/the-book-2nd.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Reinforcement Learning:
      
    
    </summary>
    
      <category term="强化学习" scheme="http://shelah-kuang.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-RL" scheme="http://shelah-kuang.github.io/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-Dynamic Programming</title>
    <link href="http://shelah-kuang.github.io/2019/07/13/RL4/"/>
    <id>http://shelah-kuang.github.io/2019/07/13/RL4/</id>
    <published>2019-07-13T07:09:38.000Z</published>
    <updated>2019-07-15T08:44:28.785Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 对应章节：<a href="http://www.incompleteideas.net/book/the-book-2nd.html" target="_blank" rel="noopener">《Reinforcement Learning: An Introduction》第二版</a>  Chap 4</p></blockquote><p>The key idea of DP, and of reinforcement learning generally, is <strong>the use of value functions to organize and structure the search for good policies</strong>.</p><blockquote><p>如果看完了西瓜书，感觉这一章略读就好</p></blockquote><h2 id="4-1-Policy-Evaluation-Prediction"><a href="#4-1-Policy-Evaluation-Prediction" class="headerlink" title="4.1 Policy Evaluation (Prediction)"></a>4.1 Policy Evaluation (Prediction)</h2><p>已知$\pi$, 估计value-function：</p><p><img src="/2019/07/13/RL4/41.png"></p><h2 id="4-2-Policy-Improvement"><a href="#4-2-Policy-Improvement" class="headerlink" title="4.2 Policy Improvement"></a>4.2 Policy Improvement</h2><p>通过上面的算法，我们可以计算出一个policy的value函数，那么为了更好的提升policy，我们可以在当前状态s下选择另一个动作a，之后的行为仍然按照原policy执行，如果$q_\pi(s,a) &gt; v_\pi(s)$的话，可以说明替换后的策略更好。</p><p>证明如下：<br><img src="/2019/07/13/RL4/44.png"></p><p>那么我们可以得到一种greedy的策略：</p><p><img src="/2019/07/13/RL4/45.png"></p><h2 id="4-3-Policy-Iteration"><a href="#4-3-Policy-Iteration" class="headerlink" title="4.3 Policy Iteration"></a>4.3 Policy Iteration</h2><p>利用之前的evaluation与improvement来得到最优的策略：</p><p><img src="/2019/07/13/RL4/42.png" length="80%" width="80%"></p><p>Policy iteration often converges in surprisingly few iterations</p><h2 id="4-4-Value-Iteration"><a href="#4-4-Value-Iteration" class="headerlink" title="4.4 Value Iteration"></a>4.4 Value Iteration</h2><p>由于每进行一次improvement都要进行一次评估，可能导致比较慢，所以可以考虑每进行一步就直接improvement</p><p><del>这些西瓜书都讲了，再看一遍太浪费时间了</del></p><p><img src="/2019/07/13/RL4/43.png"></p><h2 id="4-5-Asynchronous-Dynamic-Programming"><a href="#4-5-Asynchronous-Dynamic-Programming" class="headerlink" title="4.5 Asynchronous Dynamic Programming"></a>4.5 Asynchronous Dynamic Programming</h2><p>以上的DP算法 的一个缺点是需要遍历整个状态集多次，但是当状态集比较大的时候就耗时比较大了(比如举了无数次的例子的backgammon有$10^{20}$个状态)</p><p><strong><code>Asynchronous DP algorithms</code></strong> are in-place iterative DP algorithms that are not organized in terms of systematic sweeps of the state set. These algorithms update the values of states in any order whatsoever, using whatever values of other states happen to be available. The values of some states may be updated several times before the values of others are updated once. To converge correctly, however, an asynchronous algorithm must continue to update the values of all the states: it can’t ignore any state after some point in the computation. Asynchronous DP algorithms allow great flexibility in selecting states to update.</p><p><em><del>第八章有更详细的讨论，不多写了</del></em></p><h2 id="4-6-Generalized-Policy-Iteration"><a href="#4-6-Generalized-Policy-Iteration" class="headerlink" title="4.6 Generalized Policy Iteration"></a>4.6 Generalized Policy Iteration</h2><blockquote><p>Policy iteration consists of two simultaneous, interacting processes, one making the value function consistent with the current policy (policy evaluation), and the other making the policy greedy with respect to the current value function (policy improvement). In policy iteration, these two processes alternate, each completing before the other begins, but this is not really necessary. In value iteration, for example, only a single iteration of policy evaluation is performed in between each policy improvement. In asynchronous DP methods, the evaluation and improvement processes are interleaved at an even finer grain. In some cases a single state is updated in one process before returning to the other. As long as both processes continue to update all states, the ultimate result is typically the same—convergence to the optimal value function and an optimal policy.</p></blockquote><p>我们用generalized policy iteration (GPI）来表示上述两个子过程不断接触修改</p><p><img src="/2019/07/13/RL4/46.png"></p><blockquote><p><del>竞争中有合作，合作中有竞争</del></p><p>The evaluation and improvement processes in GPI can be viewed as both competing and cooperating. They compete in the sense that they pull in opposing directions. Making the policy greedy with respect to the value function typically makes the value function incorrect for the changed policy, and making the value function consistent with the policy typically causes that policy no longer to be greedy. In the long run, however, these two processes interact to find a single joint solution: the optimal value function and an optimal policy.</p><p>如下图：</p></blockquote><p><img src="/2019/07/13/RL4/47.png"></p><h2 id="4-7-Efficiency-of-Dynamic-Programming"><a href="#4-7-Efficiency-of-Dynamic-Programming" class="headerlink" title="4.7 Efficiency of Dynamic Programming"></a>4.7 Efficiency of Dynamic Programming</h2><p>如果用n和k表示状态数与动作数的话，忽略一些实现细节的情况下，复杂度为$k^n$</p><p>In practice, DP methods can be used with today’s computers to solve MDPs with millions of states</p><h2 id="4-8-Summary"><a href="#4-8-Summary" class="headerlink" title="4.8  Summary"></a>4.8  Summary</h2><p>总结了一下前面的内容，然后引出了新概念：</p><p>All of them update estimates of the values of states based on estimates of the values of successor states. That is, they update estimates on the basis of other estimates. We call this general idea <strong><code>bootstrapping</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 对应章节：&lt;a href=&quot;http://www.incompleteideas.net/book/the-book-2nd.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Reinforcement Learning
      
    
    </summary>
    
      <category term="强化学习" scheme="http://shelah-kuang.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-RL" scheme="http://shelah-kuang.github.io/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-Finite Markov Decision Processes</title>
    <link href="http://shelah-kuang.github.io/2019/07/13/RL3/"/>
    <id>http://shelah-kuang.github.io/2019/07/13/RL3/</id>
    <published>2019-07-13T07:09:21.000Z</published>
    <updated>2019-07-15T07:05:24.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对应章节：<a href="http://www.incompleteideas.net/book/the-book-2nd.html" target="_blank" rel="noopener">《Reinforcement Learning: An Introduction》第二版</a>  Chap 3</p></blockquote><p>感觉这一章就给了一些基础概念，看西瓜书也成啊</p><h2 id="3-1-The-Agent–Environment-Interface"><a href="#3-1-The-Agent–Environment-Interface" class="headerlink" title="3.1 The Agent–Environment Interface"></a>3.1 The Agent–Environment Interface</h2><p>The learner and decision maker is called the <strong><code>agent</code></strong>. The thing it interacts with, comprising everything outside the agent, is called the <strong><code>environment</code></strong>.</p><p><img src="/2019/07/13/RL3/31.png"></p><p>One time step later, in part as a consequence of its action, the agent receives a numerical reward, $R_{t+1}\in \textbf{R}$, and finds itself in a new state, $S_{t+1}$.</p><p>定义：$p(s’, r|s, a)= Pr{S_t=s’,R_t=r | S_{t−1}=s,A_{t−1}=a}$<br>            The function p defines the <strong><code>dynamics</code></strong> of the <strong><code>MDP</code></strong></p><p>可以看出在马尔可夫决策过程中，每一个的概率只依靠于前一次的状态于动作</p><p>类似的，可以定义以下函数：</p><p><img src="/2019/07/13/RL3/32.png" width="75%" length="75%"></p><p>The general rule we follow is that anything that cannot be changed arbitrarily by the agent is considered to be outside of it and thus part of its environment.</p><p>然后举了几个简单的例子，有兴趣可以去看</p><h2 id="3-2-Goals-and-Rewards"><a href="#3-2-Goals-and-Rewards" class="headerlink" title="3.2 Goals and Rewards"></a>3.2 Goals and Rewards</h2><p>在强化学习中，agent的目标是获取最大化的奖励和。这意味着不能单单只看立即得到的眼前的奖励，而要看长远过程下的奖励之和</p><p>奖励信号更应该告诉agent最终目标，而不是其实现过程，如同下棋时，应当是当你赢时给与奖励而不是局部最优时给予，如果那样设定的话可能导致agent追求局部最优而忽略全局</p><h2 id="3-3-Returns-and-Episodes"><a href="#3-3-Returns-and-Episodes" class="headerlink" title="3.3 Returns and Episodes"></a>3.3 Returns and Episodes</h2><p>In general, we seek to maximize the <strong><code>expected return</code></strong>, where the return, denoted $G_t$, is defined as some specific function of the reward sequence. In the simplest case the return is the sum of the rewards:$G_t=R_{t+1} + R_{t+2} + R_{t+3} + · · · + R_T$ , where T is a final time step.</p><p>This approach makes sense in applications in which there is a natural notion of final time step, that is, when the agent–environment interaction breaks naturally into subsequences, which we call <strong><code>episodes</code></strong>(有时也用trials)</p><p>每一个episode都有一个终止状态，终止状态后将被重置为初始状态</p><p>Tasks with episodes of this kind are called <strong><code>episodic tasks</code></strong>（举例：下棋，走迷宫）. In episodic tasks we sometimes need to distinguish the set of all nonterminal states, denoted $S$, from the set of all states plus the terminal state, denoted $S^+$. The time of termination, $T$, is a random variable that normally varies from episode to episode</p><p>但也有些任务是一直不会终止的，我们称为<strong><code>continuing tasks</code></strong>, 这样的话我们的$G_t$将会是无限大，故而我们采取一种概念上复杂但是数学上简单的<strong><code>discount</code></strong>定义</p><p>$$G_t=R_{t+1} +\gamma R_{t+2} +\gamma^2 R_{t+3} + · · · =R_{t+1} + \gamma G_{t+1}$$</p><p>即discounting rate $0 \leq \gamma\leq 1$，决定了未来奖励的当前价值。</p><h2 id="3-4-Unified-Notation-for-Episodic-and-Continuing-Tasks"><a href="#3-4-Unified-Notation-for-Episodic-and-Continuing-Tasks" class="headerlink" title="3.4 Unified Notation for Episodic and Continuing Tasks"></a>3.4 Unified Notation for Episodic and Continuing Tasks</h2><p>在之后的介绍中，我们两种任务都会探讨，所以我们希望寻求一种能够通用的表示两种任务的记法</p><p>我们可以考虑让episode tasks 在进入终止状态后进入一个特殊的 <strong><code>absorbing state</code></strong>，在这个状态下永远只转移到自身状态并且reward永为0，如下图深色方框：<br><img src="/2019/07/13/RL3/33.png"></p><p>故而可定义$$Gt=\sum_{k=t+1}^T\gamma^{k−t−1}R_k$$，这个公式包含了$T = \infin$ or $\gamma = 1$ (but not both)的可能性.</p><h2 id="3-5-Policies-and-Value-Functions"><a href="#3-5-Policies-and-Value-Functions" class="headerlink" title="3.5 Policies and Value Functions"></a>3.5 Policies and Value Functions</h2><p><strong><code>value functions</code></strong>—functions of states (or of state–action pairs) that estimate how good it is for the agent to be in a given state (or how good it is to perform a given action in a given state).</p><p><strong><code>policy</code></strong> is a mapping from states to probabilities of selecting each possible action.</p><p>定义：</p><p>state-value function for policy : $v_\pi(s) = E_\pi(G_t | S_t = s) = E_\pi( \sum_{k=0}^{\infty} \gamma^k R_{t+k+1} | S_t =s)$</p><p>action-value function for policy: $q_\pi(s, a) = E_\pi(G_t | S_t = s, A_t = a) = E_\pi( \sum_{k=0}^{\infty} \gamma^k R_{t+k+1} | S_t =s, A_t = a)$</p><p>我们一般可以通过经验（大量随机实验样本的均值）来获取其估计值，（如Monte Carlo methods），但是当状态空间很大的时候，这是不现实的，那时可以将其当作参数方程，通过调参的方式来得到返回值，其精确度取决于近似方式</p><p>满足递归关系, 称为是Bellman equation for $v_\pi$, It expresses a relationship between the value of a state and the values of its successor states.<br><img src="/2019/07/13/RL3/34.png"></p><p>如果已知参数（p(s′,r|s,a),π等), 则可以视为线性方程组，对于小规模的状态集，可以直接求解，其解就是值函数</p><p>对应的backup diagram：</p><p><img src="/2019/07/13/RL3/35.png"></p><h2 id="3-6-Optimal-Policies-and-Optimal-Value-Functions"><a href="#3-6-Optimal-Policies-and-Optimal-Value-Functions" class="headerlink" title="3.6 Optimal Policies and Optimal Value Functions"></a>3.6 Optimal Policies and Optimal Value Functions</h2><p>optimal policy：$\pi_*$</p><p>optimal state-value function, denoted $v_<em>$ and defined as $v_</em>(s) = \max_\pi v_\pi(s)$</p><p>optimal action-value function, denoted $q_<em>$, and defined as $q_</em>(s,a) = max_\pi q_\pi(s,a)$</p><p>有关系： $q_<em>(s, a) = E[R_{t+1} + \gamma v_</em>(S_{t+1}) | S_t=s,A_t=a]$ .</p><p>因为$v_*$也是policy的value-function，故而其也满足贝尔曼方程的条件，称为<strong><code>Bellman optimality equation</code></strong>.</p><p>可以写作：<br><img src="/2019/07/13/RL3/36.png"></p><p>最后两行（3.18，3.19）是两种常见的不同的表达形式</p><p>对应的有：<br><img src="/2019/07/13/RL3/37.png"></p><p>对应的backup diagram为：<br><img src="/2019/07/13/RL3/38.png" width="75%"></p><p>For finite MDPs, the Bellman optimality equation for $v_{*}$ has a unique solution。如果有n个状态，那么就得到一个n个变量的n个等式，如果知道必要的参数，可以通过解非线性方程组的方式对其进行求解</p><p>解出来后：<br>If you have the optimal value function, $v_{<em>}$, then the actions that appear best after a one-step search will be optimal actions. Another way of saying this is that any policy that is greedy with respect to the optimal evaluation function $v_{</em>}$ is an optimal policy.</p><p>With $q_{<em>}$, the agent does not even have to do a one-step-ahead search: for any state s, it can simply find any action that maximizes $q_{</em>}(s, a)$.</p><p><img src="/2019/07/13/RL3/39.png" width="75%"></p><p>但是这种方式的缺点在于：我们需要精确的知道环境的动态性质且有足够的计算资源去完成所有运算，同时环境需满足马尔科夫性质</p><blockquote><p>Many different decision-making methods can be viewed as ways of approximately solving the Bellman optimality equation. For example, heuristic search methods can be viewed as expanding the right-hand side of (3.19) several times, up to some depth, forming a “tree” of possibilities, and then using a heuristic evaluation function to approximate $v_{<em>}$ at the “leaf” nodes. (Heuristic search methods such as $A^</em>$ are almost always based on the episodic case.) The methods of dynamic programming can be related even more closely to the Bellman optimality equation. Many reinforcement learning methods can be clearly understood as approximately solving the Bellman optimality equation, using actual experienced transitions in place of knowledge of the expected transitions. We consider a variety of such methods in the following chapters.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对应章节：&lt;a href=&quot;http://www.incompleteideas.net/book/the-book-2nd.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Reinforcement Learning:
      
    
    </summary>
    
      <category term="强化学习" scheme="http://shelah-kuang.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-RL" scheme="http://shelah-kuang.github.io/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>博客上传pdf文件</title>
    <link href="http://shelah-kuang.github.io/2019/07/13/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0pdf%E6%96%87%E4%BB%B6/"/>
    <id>http://shelah-kuang.github.io/2019/07/13/博客上传pdf文件/</id>
    <published>2019-07-13T07:09:08.000Z</published>
    <updated>2019-07-20T06:12:47.352Z</updated>
    
    <content type="html"><![CDATA[<p>多种实现方式，以下给出<del>最无脑的</del>两种：</p><ol><li><p>可以在博客中直接预览</p><ol><li><p>下载插件</p><p><code>npm install --save hexo-pdf</code></p></li><li><p>将上传的文件存储在同名的文件夹中，然后直接引用就行了，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf  test.pdf %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><br></p><div class="row">    <embed src="Test.pdf" width="100%" height="550" type="application/pdf"></div><p><br> </p></li></ol></li><li><p>存在一个子域名下面，如<code>shelah-kuang.github.io/docs/</code></p><p>新建一个repo，然后在setting里面将他设置为page就行了（如果选择的是matser分支，那么就直接在下面了），你可以通过<code>用户名.github.io/repo名</code>进行访问(这样进入的是你的readme以及下载整个repo的界面)，也可以直接<code>用户名.github.io/repo名/文件名</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多种实现方式，以下给出&lt;del&gt;最无脑的&lt;/del&gt;两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以在博客中直接预览&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载插件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save hexo-pdf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="博客优化" scheme="http://shelah-kuang.github.io/categories/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="-blog" scheme="http://shelah-kuang.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-Multi-armed Bandits</title>
    <link href="http://shelah-kuang.github.io/2019/07/03/RL2/"/>
    <id>http://shelah-kuang.github.io/2019/07/03/RL2/</id>
    <published>2019-07-03T06:20:16.000Z</published>
    <updated>2019-07-14T08:07:35.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对应章节：<a href="http://www.incompleteideas.net/book/the-book-2nd.html" target="_blank" rel="noopener">《Reinforcement Learning: An Introduction》第二版</a>  Chap 2 </p></blockquote><p><strong>这个读书笔记建立在已经看完了西瓜书第16章的基础上，略过了很多东西</strong></p><blockquote><p>部分该章节西瓜书笔记可<a href="https://shelah-kuang.github.io/docs/RLzzh.pdf">点击</a>, <strong>因为太懒了，后面一部分的笔记还没<del>抄</del></strong></p></blockquote><p><strong><code>nonsassociative</code></strong> problem: one that does not involve learning to act in more than one situation<br><strong><code>associative</code></strong> problem:  when actions are taken in more than one situation</p><p>本章主要围绕Multi-armed Bandits（多臂老虎机问题）展开讨论，以此为例介绍几种算法</p><h2 id="2-1-A-k-armed-Bandit-Problem"><a href="#2-1-A-k-armed-Bandit-Problem" class="headerlink" title="2.1 A k-armed Bandit Problem"></a>2.1 A k-armed Bandit Problem</h2><h3 id="Problem-definition"><a href="#Problem-definition" class="headerlink" title="Problem definition"></a>Problem definition</h3><p> You are faced repeatedly with a choice among k different options, or actions. After each choice you receive a numerical reward chosen from a stationary probability distribution that depends on the action you selected. Your objective is to maximize the expected total reward over some time period</p><h3 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h3><p>第t步的动作：$A_t$, 对应奖赏$R_t$<br>对于一个动作，预期奖赏为$q_*(a) = E[R_t | A_t = a]$<br>第t步选择动作a的估计奖赏为$Q_t(a)$</p><p>选择最优：exploiting 选择非最优：exploring</p><p><em>然后就是探索与利用的关系，看西瓜书就行</em></p><h2 id="2-2-Action-value-Methods"><a href="#2-2-Action-value-Methods" class="headerlink" title="2.2 Action-value Methods"></a>2.2 Action-value Methods</h2><p>计算Q：取平均值</p><p>有多种方式求解：</p><ol><li>greedy（全利用）</li><li>$\epsilon - greedy$</li></ol><h2 id="2-3-The-10-armed-Testbed"><a href="#2-3-The-10-armed-Testbed" class="headerlink" title="2.3 The 10-armed Testbed"></a>2.3 The 10-armed Testbed</h2><p>比较了一下$\epsilon - greedy$与$greedy$的差异，优缺点以及优化看西瓜书即可</p><h2 id="2-4-Incremental-Implementation"><a href="#2-4-Incremental-Implementation" class="headerlink" title="2.4 Incremental Implementation"></a>2.4 Incremental Implementation</h2><p>如何快速更新Q估计值：<br>        $Q_{n+1} = Q_n + 1/n(R_n-Q_n)$ </p><p>上为以下公式的一种形式</p><p>$$NewEstimate\leftarrow OldEstimate + StepSize [Target − OldEstimate]$$</p><p>$[Target − OldEstimate] $被称为是估计中的$error$<br>将$StepSize$表示为$\alpha$, 更一般的，表示为$\alpha_t(a)$</p><h2 id="2-5-Tracking-a-Nonstationary-Problem"><a href="#2-5-Tracking-a-Nonstationary-Problem" class="headerlink" title="2.5 Tracking a Nonstationary Problem"></a>2.5 Tracking a Nonstationary Problem</h2><p><strong><code>stationary</code></strong>: the reward probabilities do not change over time</p><p>对于Nonstationary的问题，我们要给更多的权重给最近得到的rewards。<br>一种常见的方式是给$\alpha$设置一个常数值（展开可知$Q_{n+1} = (1-\alpha)^nQ_1+\sum_{i=1}^n\alpha(1-\alpha)^{n-i}R_i$），我们称其为<code>weighted average</code>，因为其权重和为1.有时候也称其为<code>exponential recency-weighted average</code>.</p><p>有时候让$\alpha$随时间变化而变化，用$\alpha_n(a)$第n次选择动作a时的stepsize。<br>要保证在数量足够大的情况下能够让估计值趋向于真实值，根据随机近似理论(stochastic approximation),要满足以下条件：</p><p>$$\sum_{n=1}^\infin a_n(a) = \infin \,,\sum_{n=1}^\infin a_n^2(a) &lt; \infin $$</p><p>The first condition is required to guarantee that the steps are large enough to eventually overcome any initial conditions or random fluctuations. The second condition guarantees that eventually the steps become small enough to assure convergence.</p><p>可以看出我们之前让$\alpha$为一个常数时是满足第一个条件而不满足第二个条件的，这导致其会一直变化，这也正是我们希望在Nonstationary的情况下做到的</p><p>值得说明的是，满足两个条件的参数一般都收敛的比较慢，需要仔细的调参。故而虽然在理论分析时考虑这个，但是实际应用时很少考虑这个</p><h2 id="2-6-Optimistic-Initial-Values"><a href="#2-6-Optimistic-Initial-Values" class="headerlink" title="2.6 Optimistic Initial Values"></a>2.6 Optimistic Initial Values</h2><p>之前提到的所有的方式都某种程度上依赖于初始值的估计$Q_1(a)$, 可以说这些方式都有初始值的偏差（biased by their initial estimates.）对于sample-average methods而言，只需要每个动作试一遍就可以消除这种误差了，但是对于step size为常数的方式而言，这种误差是一直存在的（虽然会不断缩小，理由可见表达式）。</p><p>初始值有时也可以被用于促进exploration，如将其初始值设定的比估计值都大，那么就可以使得会优先把所有的动作都尝试一遍，我们称呼这种为<strong><code>Optimistic Initial Values</code></strong></p><p>但这种方式不适用于nonstationary的情况，因为任务一旦变化，所有的初始值都不可能始终适用</p><h2 id="2-7-Upper-Confidence-Bound-Action-Selection"><a href="#2-7-Upper-Confidence-Bound-Action-Selection" class="headerlink" title="2.7 Upper-Confidence-Bound Action Selection"></a>2.7 Upper-Confidence-Bound Action Selection</h2><p>探索是必要的， 但是$\epsilon - greedy$并没有给出一个偏向性，使得尽可能去探索接近greedy的或者是探索次数还不够多导致并不确定的动作。所以有了<strong><code>upper confidence bound (UCB) action selection</code></strong></p><p>$$A_t = arg\,max[Q_t(a)+c\sqrt{\frac{\ln t }{N_t(a)}}]$$</p><p>其中$N_t(a)$表示动作a在第t次前被执行的次数，the number c &gt; 0 controls the degree of exploration，c可以看作是对于估计的信任程度</p><blockquote><p>UCB often performs well, as shown here, but is more difficult than “-greedy to extend beyond bandits<br>to the more general reinforcement learning settings considered in the rest of this book.<br>One difficulty is in dealing with nonstationary problems; methods more complex than those presented in Section 2.5 would be needed. Another difficulty is dealing with large state spaces, particularly when using function approximation as developed in Part II of this book. In these more advanced settings the idea of UCB action selection is usually not practical.</p></blockquote><h2 id="2-8-Gradient-Bandit-Algorithms"><a href="#2-8-Gradient-Bandit-Algorithms" class="headerlink" title="2.8 Gradient Bandit Algorithms"></a>2.8 Gradient Bandit Algorithms</h2><p>构建一个数值类型的函数$H_t(a)$使得对于每一个动作a有一定的偏向性</p><p><strong><code>soft-max distribution</code></strong>:</p><p>$$Pr{A_t = a} = \frac{e^{H_t(a)}}{\sum_{b=1}^k e^{H_t(b)}} = \pi_t(a)$$</p><p>对于第t步选择了$A_t$之后，更新各个概率为</p><p>$H_{t+1}(A_t) = H_t(A_t) + \alpha (R_t - \overline{R_t})(1-\pi_t(A_t))$  and</p><p>$H_{t+1}(a) = H_t(a) - \alpha (R_t - \overline{R_t})\pi_t(a)$ </p><p>其中$ \overline{R_t}$ 表示除去第t步之外的所有奖赏的平均值，其相当于一个baseline，如果奖赏高于这个baseline，那么对应动作$A_t$的在未来被选择的概率将增加，否则将减少</p><h2 id="2-9-Associative-Search-Contextual-Bandits"><a href="#2-9-Associative-Search-Contextual-Bandits" class="headerlink" title="2.9 Associative Search (Contextual Bandits)"></a>2.9 Associative Search (Contextual Bandits)</h2><blockquote><p>However, in a general reinforcement learning task there is more than one situation, and the goal<br>is to learn a policy: a mapping from situations to the actions that are best in those situations.</p></blockquote><blockquote><p>associative search task, so called because it involves both trial-and-error learning to search for the best actions, and association of these actions with the situations in which they are best. Associative search tasks are often now called contextual bandits in the literature.</p></blockquote><blockquote><p>Associative search tasks are intermediate between the k-armed bandit problem and the full reinforcement learning problem.If actions are allowed to affect the next situation as well as the reward, then we have the full reinforcement learning problem.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对应章节：&lt;a href=&quot;http://www.incompleteideas.net/book/the-book-2nd.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Reinforcement Learning:
      
    
    </summary>
    
      <category term="强化学习" scheme="http://shelah-kuang.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-RL" scheme="http://shelah-kuang.github.io/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>强化学习-介绍</title>
    <link href="http://shelah-kuang.github.io/2019/07/03/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A01/"/>
    <id>http://shelah-kuang.github.io/2019/07/03/强化学习1/</id>
    <published>2019-07-03T06:19:50.000Z</published>
    <updated>2019-07-11T09:08:10.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 对应教材：Sutton &amp; Barto’s book <a href="http://incompleteideas.net/book/the-book-2nd.html" target="_blank" rel="noopener">Reinforcement Learning: An Introduction (2nd Edition)</a> Chap1</p></blockquote><p>Reinforcement learning is learning what to do—how to map situations to actions—so as to maximize a numerical reward signal</p><p>The <strong><code>history</code></strong> is the sequence of observations, actions, rewards<br>$$Ht = O_1, R_1, A_1, …, A_{t−1}, O_t, Rt$$</p><p><strong><code>State</code></strong> is the information used to determine what happens next, Formally, state is a function of the history:<br>$$S_t = f (H_t)$$</p><p>An RL agent may include one or more of these components:<br>    <strong><code>Policy</code></strong>: agent’s behaviour function<br>    Value function: how good is each state and/or action<br>    Model: agent’s representation of the environment</p><p>Deterministic policy: $a = π(s)$<br>Stochastic policy: $π(a|s) = P[A_t = a|S_t = s]$</p><p><strong><code>Value function</code></strong> is a prediction of future reward. Used to evaluate the goodness/badness of states</p><p>A model predicts what the environment will do next<br>    $P$ predicts the next state<br>    $R$ predicts the next (immediate) reward, e.g.<br>    $$P^a_{ss’} = P[S_{t+1} = s’| S_t = s, A_t = a]$$<br>    $$R^a_s = E [R_{t+1} | S_t = s, A_t = a]$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 对应教材：Sutton &amp;amp; Barto’s book &lt;a href=&quot;http://incompleteideas.net/book/the-book-2nd.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;R
      
    
    </summary>
    
      <category term="强化学习" scheme="http://shelah-kuang.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-RL" scheme="http://shelah-kuang.github.io/tags/RL/"/>
    
  </entry>
  
  <entry>
    <title>java学习(1)-基础语法</title>
    <link href="http://shelah-kuang.github.io/2019/06/27/java%E5%AD%A6%E4%B9%A01/"/>
    <id>http://shelah-kuang.github.io/2019/06/27/java学习1/</id>
    <published>2019-06-27T15:19:57.000Z</published>
    <updated>2019-06-27T16:04:19.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>教材：Core Java Volume I-Fundamentals (10th edition)</p></blockquote><blockquote><p>Tips:   对于有c++基础的同学而言，这一章挺简单的，建议瞟一眼跳了就行</p></blockquote><h2 id="一个简单的java程序"><a href="#一个简单的java程序" class="headerlink" title="一个简单的java程序"></a>一个简单的java程序</h2><p>源代码的文件名必须与公共类的文件名字相同，并用<code>.java</code>作为文件扩展名</p><p>java中的main函数必须是静态的</p><p>java中的所有函数都属于某个类的方法</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>与c++一致 <code>\\</code> <code>\**\</code></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><p><strong>byte：</strong></p><ul><li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li><li>最小值是 <strong>-128（-2^7）</strong>；</li><li>最大值是 <strong>127（2^7-1）</strong>；</li><li>默认值是 <strong>0</strong>；</li></ul><p><strong>short：</strong></p><ul><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li><li>最小值是 <strong>-32768（-2^15）</strong>；</li><li>最大值是 <strong>32767（2^15 - 1）</strong>；</li><li>默认值是 <strong>0</strong>；</li></ul><p><strong>int：</strong></p><ul><li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li><li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li><li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li><li>一般地整型变量默认为 int 类型；</li><li>默认值是 <strong>0</strong> ；</li></ul><p><strong>long：</strong></p><ul><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li><li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li><li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li><li>默认值是 <strong>0L</strong>；</li></ul><p><strong>java 整型变量大小与平台无关（32位/64位），且不存在无符号整数类型</strong></p><p>在java7之后可以给数字字面加上下划线更加易读，如<code>1_000_000</code>表示1百万，编译器会去掉这些下划线</p><h4 id="8-16-2进制表示"><a href="#8-16-2进制表示" class="headerlink" title="8/16/2进制表示"></a>8/16/2进制表示</h4><p>十六进制<code>0x</code> 或者<code>0X</code></p><p> 八进制：前缀0（易混淆不建议使用）</p><p>二进制：从java7开始，可以用<code>0b</code>或<code>0B</code>开头表示二进制</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>float：+/- 3.40282347E+38F （有效数字6-7位）</p><p>double：+/- 1.79769313486231570E + 308 (有效数字15位)</p><p>float类型的数值有一个后缀<code>f</code>或<code>F</code>，没有后缀的浮点数值默认为double类型</p><p><code>Double.POSITIVE_INFINITY</code> 表示正无穷大， <code>Double_NEGATIVE_INFINITY</code>表示负无穷大， <code>Double.NaN</code>表示不是一个数字（但是注意不能直接用<code>==</code>来检测一个值是不是NaN，这个判断是永不成立的，应当使用<code>Double.isNaN()</code>方法）</p><h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h3><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出后换行：<code>System.out.println()</code><br>输出后不换行：<code>System.out.print()</code></p><h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;教材：Core Java Volume I-Fundamentals (10th edition)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips:   对于有c++基础的同学而言，这一章挺简单的，建议瞟一眼跳了就行&lt;
      
    
    </summary>
    
      <category term="coding" scheme="http://shelah-kuang.github.io/categories/coding/"/>
    
    
      <category term="-java" scheme="http://shelah-kuang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>终端与shell</title>
    <link href="http://shelah-kuang.github.io/2019/06/22/%E7%BB%88%E7%AB%AF%E4%B8%8Eshell/"/>
    <id>http://shelah-kuang.github.io/2019/06/22/终端与shell/</id>
    <published>2019-06-22T12:59:01.000Z</published>
    <updated>2019-06-22T13:19:32.854Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html#Implementing-a-Shell" target="_blank" rel="noopener">参考阅读</a></p></blockquote><p>终端默认是“cooked mode”，即自带一个“行编辑器”，只有按下回车键，read系统调用才返回</p><h2 id="shell执行程序"><a href="#shell执行程序" class="headerlink" title="shell执行程序"></a>shell执行程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// 管道、重定向、……</span></span><br><span class="line">  execve(...);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!endswith(<span class="string">"&amp;"</span>)) &#123;</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html#Implementing-a-Shell&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="OS" scheme="http://shelah-kuang.github.io/categories/OS/"/>
    
    
      <category term="-review" scheme="http://shelah-kuang.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>崩溃恢复与日志</title>
    <link href="http://shelah-kuang.github.io/2019/06/21/%E5%B4%A9%E6%BA%83%E6%81%A2%E5%A4%8D%E4%B8%8E%E6%97%A5%E5%BF%97/"/>
    <id>http://shelah-kuang.github.io/2019/06/21/崩溃恢复与日志/</id>
    <published>2019-06-21T13:42:10.000Z</published>
    <updated>2019-06-22T12:22:00.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FSCK-The-File-System-Checker"><a href="#FSCK-The-File-System-Checker" class="headerlink" title="FSCK(The File System Checker)"></a>FSCK(The File System Checker)</h2><p>检查的对象：</p><ul><li><p>superblock: making sure the file system size is greater than the number of blocks that have been allocated</p></li><li><p>free blocks: 检查inode指向的block和inode本身的状态，确认和bitmap一致，如果不一致，选择相信inode</p></li><li><p>inode state：检查其数据是否看起来合法，如检查文件类型是否有效，如果出错则删除inode并且随之更改bitmap</p></li><li><p>inode links： 检查链接情况（遍历文件树中看link count与inode中是否一致） (没有链接的inode被移到lost+found目录中)</p></li><li><p>duplicates：checks for duplicate pointers, i.e., cases where two different inodes refer to the same block</p></li><li><p>bad blocks：A pointer is considered “bad” if it obviously points to something outside its valid range</p></li><li><p>directory checks：performs additional integrity checks on the contents of each directory, making sure that “.” and “..” are the first entries, that each inode referred to in a directory entry is allocated, and ensuring that no directory is linked to more than once in the entire hierarchy.</p></li></ul><h2 id="Journaling-write-ahead-logging"><a href="#Journaling-write-ahead-logging" class="headerlink" title="Journaling(write-ahead logging)"></a>Journaling(write-ahead logging)</h2><p>在写之前，在disk的某个确定的位置记录你要做什么，如果发生崩溃，则可以继续执行</p><ol><li><p>Journal write: Write the transaction, including a transaction-begin block, all pending data and metadata updates, and a transaction-end block, to the log; wait for these writes to complete.</p></li><li><p>Checkpoint: Write the pending metadata and data updates to their final locations in the file system.</p></li></ol><p>为了节约时间，可以让前几个并发的一起写</p><ol><li>Journal write: Write the contents of the transaction (including TxB, metadata, and data) to the log; wait for these writes to complete.</li><li>Journal commit: Write the transaction commit block (containing TxE) to the log; wait for write to complete; transaction is said to be committed.</li><li>Checkpoint: Write the contents of the update (metadata and data) to their final on-disk locations.</li></ol><h4 id="Metadata-Journaling"><a href="#Metadata-Journaling" class="headerlink" title="Metadata Journaling"></a>Metadata Journaling</h4><ol><li>Data write: Write data to final location; wait for completion (the wait is optional; see below for details).</li><li>Journal metadata write: Write the begin block and metadata to the log; wait for writes to complete.</li><li>Journal commit: Write the transaction commit block (containing TxE) to the log; wait for the write to complete; the transaction (including data) is now committed.</li><li>Checkpoint metadata: Write the contents of the metadata update to their final locations within the file system.</li><li>Free: Later, mark the transaction free in journal superblock.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FSCK-The-File-System-Checker&quot;&gt;&lt;a href=&quot;#FSCK-The-File-System-Checker&quot; class=&quot;headerlink&quot; title=&quot;FSCK(The File System Checker)&quot;&gt;&lt;/a&gt;F
      
    
    </summary>
    
      <category term="OS" scheme="http://shelah-kuang.github.io/categories/OS/"/>
    
    
      <category term="-review" scheme="http://shelah-kuang.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>持久数据的可靠性</title>
    <link href="http://shelah-kuang.github.io/2019/06/21/%E6%8C%81%E4%B9%85%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7/"/>
    <id>http://shelah-kuang.github.io/2019/06/21/持久数据的可靠性/</id>
    <published>2019-06-21T13:41:53.000Z</published>
    <updated>2019-06-22T09:32:09.043Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>Redundant Array of Inexpensive Disks(RAID)</code></strong>: 独立磁盘冗余阵列，通常简称为磁盘阵列</p><p><img src="/2019/06/21/持久数据的可靠性/raid.png"></p><h2 id="评价维度"><a href="#评价维度" class="headerlink" title="评价维度"></a>评价维度</h2><p><strong>capacity</strong>：given a set of N disks each with B blocks, how much useful capacity is available to clients of the RAID</p><p><strong>reliability</strong>：How many disk faults can the given design tolerate</p><p><strong>performance</strong></p><h2 id="RAID-0：striping"><a href="#RAID-0：striping" class="headerlink" title="RAID-0：striping"></a>RAID-0：striping</h2><p>RAID-0 是一种简单的、无数据校验的数据条带化技术。实际上不是一种真正的 RAID ，因为它并不提供任何形式的冗余策略。 </p><p><img src="/2019/06/21/持久数据的可靠性/r0.png" height="75%" width="75%"></p><p>将每一行的block称为是一个<strong>stripe</strong></p><p>也可能是按照chunk来排列，比如一个block为4kb，如果我一个chunk取8kb，将是如下情况：</p><p><img src="/2019/06/21/持久数据的可靠性/r01.png" height="50%" width="50%"></p><h2 id="RAID-1-Mirroring"><a href="#RAID-1-Mirroring" class="headerlink" title="RAID-1:Mirroring"></a>RAID-1:Mirroring</h2><p>RAID-1 采用镜像技术,同时在阵列中产生两个完全相同的数据副本，分布在两个不同的磁盘驱动器组上。镜像提供了完全的数据冗余能力，当一个数据副本失效不可用时，外部系统仍可正常访问另一副本，不会对应用系统运行和性能产生影响。</p><p><img src="/2019/06/21/持久数据的可靠性/r1.png" height="75%" width="75%"></p><h3 id="RAID1-0"><a href="#RAID1-0" class="headerlink" title="RAID1+0"></a>RAID1+0</h3><p><img src="/2019/06/21/持久数据的可靠性/1+0.png"></p><h3 id="RAID0-1"><a href="#RAID0-1" class="headerlink" title="RAID0+1"></a>RAID0+1</h3><p><img src="/2019/06/21/持久数据的可靠性/0+1.png"></p><h2 id="RAID-Level-4-Saving-Space-With-Parity"><a href="#RAID-Level-4-Saving-Space-With-Parity" class="headerlink" title="RAID Level 4: Saving Space With Parity"></a>RAID Level 4: Saving Space With Parity</h2><p><img src="/2019/06/21/持久数据的可靠性/r4.png" height="75%" width="75%"></p><p>对每一bit做奇偶校验存在一个专门的磁盘的对应bit上</p><p>对于sequential write，先计算出P，然后直接一次写一个stripe</p><p>对于random wirte，将面临如何一边写一边改P，对应的有两种方式：<br><strong><code>additive parity</code></strong>: 先将其余盘的所有对应的block读出来然后计算P，然后同时写对应block与P，这样的缺点是当disk比较多的时候需要大量的读次数<br><strong><code>subtractive parity</code></strong>: 就是看要覆盖的block和要写的block对应bit是否相同，如相同，则对应p不变，如不同则翻转p值，即$P_{new} = (C_{old} ⊕ C_{new}) ⊕ P_{old}$<br>在性能分析时，我们分析subtractive parity， 虽然可以并行的读data disk 但是由于parity disk只有一个，故而只能依次来进行（small-write problem），同时每个周期需要读一次写一次，故而只有r/2</p><h2 id="RAID-Level-5-Rotating-Parity"><a href="#RAID-Level-5-Rotating-Parity" class="headerlink" title="RAID Level 5: Rotating Parity"></a>RAID Level 5: Rotating Parity</h2><p><img src="/2019/06/21/持久数据的可靠性/r5.png" height="75%" width="75%"></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>To conclude, if you strictly want performance and do not care about reliability, striping is obviously best. If, however, you want random I/O performance and reliability, mirroring is the best; the cost you pay is in lost capacity. If capacity and reliability are your main goals, then RAID-5 is the winner; the cost you pay is in small-write performance. Finally,if you are always doing sequential I/O and want to maximize capacity,RAID-5 also makes the most sense.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;code&gt;Redundant Array of Inexpensive Disks(RAID)&lt;/code&gt;&lt;/strong&gt;: 独立磁盘冗余阵列，通常简称为磁盘阵列&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/06/21/持久数据的可靠性/raid.p
      
    
    </summary>
    
      <category term="OS" scheme="http://shelah-kuang.github.io/categories/OS/"/>
    
    
      <category term="-review" scheme="http://shelah-kuang.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>FAT与ext2</title>
    <link href="http://shelah-kuang.github.io/2019/06/21/FAT%E4%B8%8Eext2/"/>
    <id>http://shelah-kuang.github.io/2019/06/21/FAT与ext2/</id>
    <published>2019-06-21T13:41:38.000Z</published>
    <updated>2019-06-22T09:12:27.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本blog基本搬运jyy的讲义和slides</p></blockquote><h2 id="FAT"><a href="#FAT" class="headerlink" title="FAT"></a>FAT</h2><p>FAT文件系统的基本思想是使用链表管理所有的数据块。FAT文件系统把若干个连续的扇区(sector)作为一个簇(cluster)</p><p>希望表示一个文件，我们只需要知道：文件的第一块的编号,对于每一块，它下一块的编号</p><p>FAT文件系统专门在磁盘中开辟一个区域(File Allocation Table, FAT)，来存储每一块的下一块编号。除了编号之外，还有两种特殊的编号：free (0, 该块可以使用),EOF (-1, 该块代表了某个文件的末尾)</p><p>缺点是文件系统可能碎片化，不利用I/O优化，lseek需要读取大量FAT数据块</p><h2 id="ext2"><a href="#ext2" class="headerlink" title="ext2"></a>ext2</h2><p>与上一篇博客中的vsfs基本类似</p><p>采用bitmap进行内存管理</p><p>inode中用多个级别的索引（direct blocks、indirect blocks、double indirect…..）</p><p>目录中顺序存储文件/子目录名字 inode编号<br>inode–rec_len–name_len–file_type–name</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本blog基本搬运jyy的讲义和slides&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;FAT&quot;&gt;&lt;a href=&quot;#FAT&quot; class=&quot;headerlink&quot; title=&quot;FAT&quot;&gt;&lt;/a&gt;FAT&lt;/h2&gt;&lt;p&gt;FAT文件系统的基
      
    
    </summary>
    
      <category term="OS" scheme="http://shelah-kuang.github.io/categories/OS/"/>
    
    
      <category term="-review" scheme="http://shelah-kuang.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>文件系统</title>
    <link href="http://shelah-kuang.github.io/2019/06/21/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://shelah-kuang.github.io/2019/06/21/文件系统/</id>
    <published>2019-06-21T13:41:14.000Z</published>
    <updated>2019-06-22T08:54:29.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>每一个file都有一个<code>low-level name</code>， 一般我们指<strong><code>inode number</code></strong>, </p><p><strong><code>directory</code></strong>：存储a list of pairs  (user-readable name, low-level name)</p><blockquote><p>UNIX/Linux的File System Hierarchy标准规定了文件系统目录树中各个目录的功能：</p><ul><li>/boot - 系统启动数据</li><li>/bin - 应用程序 (bash, ps, grep, …)</li><li>/dev - 设备文件</li><li>/sbin - 系统程序 (mkfs, fdisk, ifconfig, dhclient, …)</li><li>/etc - 配置文件 (= “etcetera”)</li><li>/home - 用户目录</li><li>/lib - 库文件 (libc.so, libpthread.so, …)</li><li>/media - 可移动设备 (cdrom, USB flash ,…)</li><li>/usr - 用户程序 (/usr/bin/, /usr/lib/, /usr/local/)</li><li>/var - 可变文件 (logs, snapshots, …)</li><li>/tmp - 临时文件</li></ul></blockquote><h2 id="File-System-Interface"><a href="#File-System-Interface" class="headerlink" title="File System Interface"></a>File System Interface</h2><h3 id="Creating-files"><a href="#Creating-files" class="headerlink" title="Creating files"></a>Creating files</h3><p>int fd = <strong><code>open</code></strong>(“foo”, O_CREAT|O_WRONLY|O_TRUNC, S_IRUSR|S_IWUSR);</p><p>O_CREAT :creates the file  if it does not exist,<br>O_WRONLY: ensures that the file can only be written to, and,<br>O_TRUNC: if the file already exists, truncates it to a size of zero bytes thus removing any existing<br>content </p><h3 id="Reading-And-Writing-Files"><a href="#Reading-And-Writing-Files" class="headerlink" title="Reading And Writing Files"></a>Reading And Writing Files</h3><p><strong><code>cat</code></strong> :dump the contents of the file to the screen.</p><p>…(还有一些 不想抄了)</p><h3 id="Shared-File-Table-Entries-fork-And-dup"><a href="#Shared-File-Table-Entries-fork-And-dup" class="headerlink" title="Shared File Table Entries: fork() And dup()"></a>Shared File Table Entries: fork() And dup()</h3><p>dup() call allows a process to create a new file descriptor that refers to the same underlying open file as an existing descriptor.</p><h3 id="Writing-Immediately-With-fsync"><a href="#Writing-Immediately-With-fsync" class="headerlink" title="Writing Immediately With fsync()"></a>Writing Immediately With fsync()</h3><p><strong><code>fsync(int fd)</code></strong>. When a process calls fsync() for a particular file descriptor, the file system responds by forcing all dirty (i.e., not yet written) data to disk, for the file referred to by the specified file descriptor.</p><h3 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h3><p><strong><code>rename(char*old, char *new),</code></strong> call is that it is (usually) implemented as an atomic call</p><h3 id="Getting-Information-About-Files"><a href="#Getting-Information-About-Files" class="headerlink" title="Getting Information About Files"></a>Getting Information About Files</h3><p><strong><code>stat()</code></strong> or <strong><code>fstat()</code></strong></p><h3 id="Reading-Directories"><a href="#Reading-Directories" class="headerlink" title="Reading Directories"></a>Reading Directories</h3><p>opendir(), readdir(), and closedir()</p><p>readdir()得到以下结构体：<br><img src="/2019/06/21/文件系统/dirent.png"></p><h3 id="Hard-Links"><a href="#Hard-Links" class="headerlink" title="Hard Links"></a>Hard Links</h3><p><strong><code>link()</code></strong> system call takes two arguments, an old pathname and a new one; when you “link” a new file name to an old one, you essentially create another way to refer to the same file. The command-line program <code>ln</code> is used to do this</p><p>link后的两个指向相同的inode number，对于文件系统而言，对用户可见的名字不同没有关系，因为他们指向相同的内部的结构metadata，这个是根据inode number来查找的</p><p>当你删除一个文件的时候，会调用unlink()，将检查对应inode number对应的reference count（link count），并将其减少1，只有其变为0的时候，才会free掉对应的数据结构</p><h3 id="Symbolic-Links-soft-links"><a href="#Symbolic-Links-soft-links" class="headerlink" title="Symbolic Links(soft links)"></a>Symbolic Links(soft links)</h3><p>The way a symbolic link is formed is by holding the pathname of the linked-to file as the data of the<br>link file</p><h3 id="Making-And-Mounting-A-File-System"><a href="#Making-And-Mounting-A-File-System" class="headerlink" title="Making And Mounting A File System"></a>Making And Mounting A File System</h3><p><strong><code>mkfs</code></strong>：give the tool, as input, a device (such as a disk partition, e.g., /dev/sda1) and a file system type (e.g., ext3), and it simply writes an empty file system, starting with a root directory, onto that disk partition.</p><p><strong><code>mount</code></strong>完成的工作是<strong>把一个设备和一个文件系统实现联系起来，在设备上创建一个文件系统实例，并且把创建的文件系统“放置”到文件系统中的一个路径里</strong>。</p><h2 id="文件系统实现"><a href="#文件系统实现" class="headerlink" title="文件系统实现"></a>文件系统实现</h2><h3 id="VSFS-Very-Simple-File-System"><a href="#VSFS-Very-Simple-File-System" class="headerlink" title="VSFS(Very Simple File System)"></a>VSFS(Very Simple File System)</h3><h4 id="Overall-Organization"><a href="#Overall-Organization" class="headerlink" title="Overall Organization"></a>Overall Organization</h4><p><img src="/2019/06/21/文件系统/rg.png"></p><p>我们假设以4kb为一个block，现在我们假设有一个非常小的disk，只有64个block，考虑其应该有的组成<br>a)  首先必然存储数据且应该是大部分block都存储数据<br>b）对于每一个文件，都应该有一个inode<br>c）需要有一个分配结构来追踪每一个data或者inode的block是否为free，有多种实现方式，如链表，此处采用<code>bitmap</code>的方式，每一个bit为0/1表示对应的block是否被占用，此处应有两个bitmap，data和inode各一个<br>d）一个superblock， 用于存储关于这个文件系统的信息，如有多少各inode和data blocks，inode table从哪里开始等（当挂载一个文件系统的时候，首先读superblock的信息来初始化各种参数）</p><h4 id="File-Organization-The-Inode"><a href="#File-Organization-The-Inode" class="headerlink" title="File Organization: The Inode"></a>File Organization: The Inode</h4><p><strong><code>Inode</code></strong>: index node</p><p>每一个inode都会被一个数字所指代（i-number），在操作系统中，给你这个数字，你可以直接计算出在这个磁盘中对应inode的位置</p><p><img src="/2019/06/21/文件系统/nt.png"></p><p>inode有多种存储方式，如下：</p><ul><li>连续存储在文件系统中的某个区域，这样可以直接根据inode的编号计算出inode在磁盘中的位置，这也是实现文件唯一id的一个途径；（上图采用的方式）</li><li>存储在文件头部，文件唯一id = 第一个数据块的编号；</li><li>存储在目录文件中，文件唯一id = 第一个数据块的编号，在支持链接的文件系统中，文件的元数据会有多份拷贝。</li></ul><p>在inode中，几乎存储了所有关于其对应文件的信息，我们将这些信息称为<strong><code>metadata</code></strong>,</p><p>包括</p><ul><li>文件的唯一id；</li><li>文件的类型，用于区分普通文件和目录文件；</li><li>访问权限，就是大家熟知的rwxrwxrwx；</li><li>所有者信息 (uid, gid)，但这在跨系统访问时成为很大的麻烦；</li><li>文件大小；</li><li>文件访问的时间信息：创建时间、访问时间、修改时间；</li><li>链接数量 (刚才已经提到)；</li><li>一些其他信息，例如文件的第一个数据块的编号等</li></ul><p>一种inode存储的信息示例如下：</p><p><img src="/2019/06/21/文件系统/inode.png" height="75%" width="75%"></p><p>在inode中有一个重要信息是指向文件data所在block的地址的指针，一种实现方式是采用<strong><code>direct pointer</code></strong>，但是这样对于较大的文件，存储在多个不同的block中时会比较麻烦，此时一种方式时采用<strong><code>indirect pointer</code></strong>,这个指针指向一个全部存储对应的direct pointer的block，而如果还要更大的话，则可以采用<strong><code>double indirect pointer</code></strong>(即指向一个全是indirect pointer的block)，如果还要更多，可以以此类推<strong><code>triple indirect pointer</code></strong></p><h4 id="Directory-Organization"><a href="#Directory-Organization" class="headerlink" title="Directory Organization"></a>Directory Organization</h4><p>each entry has an inode number, record length (the total bytes for the name plus any left over space), string length (the actual length of the name), and finally the name of the entry.</p><p>目录同样被操作系统认为是一个文件，有对应的inode，只是inode中其类型为directory</p><h4 id="Free-Space-Management"><a href="#Free-Space-Management" class="headerlink" title="Free Space Management"></a>Free Space Management</h4><p>在vsfs中，用的是bitmap，还可以用链表来实现，现代操作系统中有更多的实现方式如b-tree</p><h4 id="Access-Paths-Reading-and-Writing"><a href="#Access-Paths-Reading-and-Writing" class="headerlink" title="Access Paths: Reading and Writing"></a>Access Paths: Reading and Writing</h4><p>对于一个路径，如果我们想找到对应的文件或目录的inode值，其值一般会存储在其父目录中，而<strong>/</strong>没有父目录，故而一般在unix系统中设置其inode值为2，找到父目录的inode之后，就根据指针找到其data区域，在data中找到其对应文件的入口，找到后，文件系统就获取的该文件的inode number，之后类似的重复直到找到对应文件为止。在open（）操作中，找到文件后，会把文件的inode读入，并在pre-process open-file table中分配一个fd给这个process。</p><p>打开文件后如执行read操作，则会更新inode中的存储的时间变量，然后回更新fd对应的in-memory open file table，修改文件偏移量</p><p>如果要写文件的话，要先读inode，再读bitmap，再写bitmap，分配后再写data，写完后更新inode</p><h3 id="FAT与ext2"><a href="#FAT与ext2" class="headerlink" title="FAT与ext2"></a>FAT与ext2</h3><p>断章了，见下一篇blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;每一个file都有一个&lt;code&gt;low-level name&lt;/code&gt;， 一般我们指&lt;strong&gt;&lt;code&gt;ino
      
    
    </summary>
    
      <category term="OS" scheme="http://shelah-kuang.github.io/categories/OS/"/>
    
    
      <category term="-review" scheme="http://shelah-kuang.github.io/tags/review/"/>
    
  </entry>
  
</feed>
